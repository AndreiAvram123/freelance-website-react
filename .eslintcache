[{"/Users/andreia/WebstormProjects/freelance-website-react/src/index.js":"1","/Users/andreia/WebstormProjects/freelance-website-react/src/App.tsx":"2","/Users/andreia/WebstormProjects/freelance-website-react/src/contexts/CartContext.tsx":"3","/Users/andreia/WebstormProjects/freelance-website-react/src/contexts/CategoriesContext.tsx":"4","/Users/andreia/WebstormProjects/freelance-website-react/src/components/Navbar.tsx":"5","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Cart.tsx":"6","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Register.tsx":"7","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/SignIn.tsx":"8","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/ExpandedProduct.tsx":"9","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/ProductsPage.tsx":"10","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Home.tsx":"11","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/Dashboard.tsx":"12","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TasksProgress.js":"13","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalProfit.js":"14","/Users/andreia/WebstormProjects/freelance-website-react/src/components/StorageHandler.ts":"15","/Users/andreia/WebstormProjects/freelance-website-react/src/Utils.ts":"16","/Users/andreia/WebstormProjects/freelance-website-react/src/components/LiveSearch.ts":"17","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/OrderRepository.ts":"18","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/NetworkExecutor.ts":"19","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/ProductRepository.ts":"20","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/AuthRepository.ts":"21","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/ReviewsRepository.ts":"22","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/UserManager.ts":"23","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/CartProducts.tsx":"24","/Users/andreia/WebstormProjects/freelance-website-react/src/components/Product.tsx":"25","/Users/andreia/WebstormProjects/freelance-website-react/src/components/CarouselImages.tsx":"26","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/WriteReviewModal.tsx":"27","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalAmount.tsx":"28","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalCustomers.tsx":"29","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/LatestOrders.tsx":"30","/Users/andreia/WebstormProjects/freelance-website-react/src/components/AddProductModal.tsx":"31","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/LatestProducts.tsx":"32","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/AddCategoryModal.tsx":"33","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/ApiConstants.ts":"34","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/ImageUtils.ts":"35","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/requests/ApiRequest.ts":"36","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/AnalyticsRepository.ts":"37","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/Messages.ts":"38","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/CategoriesRepository.ts":"39","/Users/andreia/WebstormProjects/freelance-website-react/src/components/ConfirmationModal.tsx":"40","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/CartItem.tsx":"41","/Users/andreia/WebstormProjects/freelance-website-react/src/entities/Order.ts":"42","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/IncreaseStockModal.tsx":"43","/Users/andreia/WebstormProjects/freelance-website-react/src/components/ModifyProductModal.tsx":"44","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/PaymentRepository.ts":"45","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/PaymentResult.tsx":"46","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Checkout.tsx":"47","/Users/andreia/WebstormProjects/freelance-website-react/src/entities/CountriesList.ts":"48","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalAvailableProducts.tsx":"49","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/State.ts":"50","/Users/andreia/WebstormProjects/freelance-website-react/src/helpers/RouterUtils.ts":"51"},{"size":199,"mtime":1610925698111,"results":"52","hashOfConfig":"53"},{"size":4446,"mtime":1611165128725,"results":"54","hashOfConfig":"53"},{"size":1391,"mtime":1610925698110,"results":"55","hashOfConfig":"53"},{"size":994,"mtime":1617545549562,"results":"56","hashOfConfig":"53"},{"size":3969,"mtime":1617544976689,"results":"57","hashOfConfig":"53"},{"size":5046,"mtime":1620744579727,"results":"58","hashOfConfig":"53"},{"size":7447,"mtime":1620902848985,"results":"59","hashOfConfig":"53"},{"size":4580,"mtime":1611238520969,"results":"60","hashOfConfig":"53"},{"size":10167,"mtime":1620901291097,"results":"61","hashOfConfig":"53"},{"size":3121,"mtime":1617544764566,"results":"62","hashOfConfig":"53"},{"size":2713,"mtime":1617545513463,"results":"63","hashOfConfig":"53"},{"size":3050,"mtime":1611231482542,"results":"64","hashOfConfig":"53"},{"size":1470,"mtime":1610925698110,"results":"65","hashOfConfig":"53"},{"size":1074,"mtime":1610925698110,"results":"66","hashOfConfig":"53"},{"size":1760,"mtime":1620823559989,"results":"67","hashOfConfig":"53"},{"size":250,"mtime":1617701762850,"results":"68","hashOfConfig":"53"},{"size":2157,"mtime":1617544515597,"results":"69","hashOfConfig":"53"},{"size":951,"mtime":1620821418090,"results":"70","hashOfConfig":"53"},{"size":1033,"mtime":1620901985506,"results":"71","hashOfConfig":"53"},{"size":2803,"mtime":1617703707775,"results":"72","hashOfConfig":"53"},{"size":1579,"mtime":1620903412423,"results":"73","hashOfConfig":"53"},{"size":719,"mtime":1617544083662,"results":"74","hashOfConfig":"53"},{"size":837,"mtime":1610925698114,"results":"75","hashOfConfig":"53"},{"size":602,"mtime":1610925698112,"results":"76","hashOfConfig":"53"},{"size":1935,"mtime":1611169661835,"results":"77","hashOfConfig":"53"},{"size":1777,"mtime":1611069666663,"results":"78","hashOfConfig":"53"},{"size":3642,"mtime":1610925698109,"results":"79","hashOfConfig":"53"},{"size":2273,"mtime":1620834265702,"results":"80","hashOfConfig":"53"},{"size":2743,"mtime":1620833992272,"results":"81","hashOfConfig":"53"},{"size":5806,"mtime":1620822632635,"results":"82","hashOfConfig":"53"},{"size":5460,"mtime":1610925698107,"results":"83","hashOfConfig":"53"},{"size":6033,"mtime":1617544566422,"results":"84","hashOfConfig":"53"},{"size":2553,"mtime":1611153615548,"results":"85","hashOfConfig":"53"},{"size":2333,"mtime":1620903393044,"results":"86","hashOfConfig":"53"},{"size":811,"mtime":1610925698114,"results":"87","hashOfConfig":"53"},{"size":614,"mtime":1620744144885,"results":"88","hashOfConfig":"53"},{"size":1185,"mtime":1620901291102,"results":"89","hashOfConfig":"53"},{"size":341,"mtime":1610925698114,"results":"90","hashOfConfig":"53"},{"size":444,"mtime":1617544515600,"results":"91","hashOfConfig":"53"},{"size":1875,"mtime":1610971766368,"results":"92","hashOfConfig":"53"},{"size":3161,"mtime":1611069781635,"results":"93","hashOfConfig":"53"},{"size":559,"mtime":1620821418094,"results":"94","hashOfConfig":"53"},{"size":2863,"mtime":1610925698109,"results":"95","hashOfConfig":"53"},{"size":5142,"mtime":1620902248972,"results":"96","hashOfConfig":"53"},{"size":829,"mtime":1620759396218,"results":"97","hashOfConfig":"53"},{"size":2460,"mtime":1620832197761,"results":"98","hashOfConfig":"53"},{"size":7468,"mtime":1620901291089,"results":"99","hashOfConfig":"53"},{"size":5027,"mtime":1610999449285,"results":"100","hashOfConfig":"53"},{"size":2303,"mtime":1611231482539,"results":"101","hashOfConfig":"53"},{"size":756,"mtime":1620832947751,"results":"102","hashOfConfig":"53"},{"size":65,"mtime":1620761968043,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1mxsy89",{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"110"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"110"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"110"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"138"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"110"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"110"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"110"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"110"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"110"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"110"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"110"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"110"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"110"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"110"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"110"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"/Users/andreia/WebstormProjects/freelance-website-react/src/index.js",[],["230","231"],"/Users/andreia/WebstormProjects/freelance-website-react/src/App.tsx",["232"],"\nimport './App.css';\nimport React, {Suspense} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport {CartProvider} from \"./contexts/CartContext\";\nimport  {CategoriesProvider} from \"./contexts/CategoriesContext\";\nimport Navbar from \"./components/Navbar\";\nimport Dashboard from \"./components/reports/DashboardView/Dashboard\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core\";\nimport {blue} from \"@material-ui/core/colors\";\n\nexport default function  App(){\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                main:'#90C751'\n            },\n            secondary : {\n                main : '#639949'\n            }\n        },\n    });\n\n    const Register = React.lazy(()=> import('./pages/Register'))\n    const SignIn  = React.lazy(()=> import('./pages/SignIn'))\n    const Home = React.lazy(()=> import('./pages/Home'))\n    const Cart = React.lazy(()=>import('./pages/Cart'))\n    const ExpandedProduct = React.lazy(()=> import('./pages/ExpandedProduct'))\n    const ProductsPage = React.lazy(()=> import('./pages/ProductsPage'))\n\n    const CheckoutPage = React.lazy(()=> import('./pages/Checkout'))\n    const PaymentResultPage = React.lazy(()=>import('./pages/PaymentResult'))\n\n    return (\n     <MuiThemeProvider theme={theme}>\n        <Router>\n            <Switch>\n                <div>\n                   <CategoriesProvider>\n                        <CartProvider>\n                            <Navbar/>\n\n                            <Route path = \"/dashboard\" exact component={()=>\n                                <Suspense fallback = {<div>Loading...</div>} >\n                                    <Dashboard />\n                                </Suspense>\n                            } />\n\n                            <Route path = \"/\" exact component={()=>\n                                <Suspense fallback = {<div>Loading...</div>} >\n                                    <Home/>\n                                </Suspense>} />\n\n                            <div className={\"container-md\"}>\n                                <Route path = \"/cart\" exact component={()=>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <Cart />\n                                    </Suspense>} />\n                                <Route  path = \"/product/:productID\" exact component={()=>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <ExpandedProduct/>\n                                    </Suspense>\n                                } />\n                                <Route path={\"/products\"} exact component={()=>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <ProductsPage/>\n                                    </Suspense>\n                                } />\n                                <Route path=  \"/register\" exact component={ () =>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <Register />\n                                    </Suspense>\n                                } />\n                                <Route path=\"/pay\" exact component={\n                                    ()=> <Suspense fallback={<div>Loading...</div>} >\n                                       <CheckoutPage />\n                                    </Suspense>\n                                }\n                                />\n\n                                <Route path= \"/payment\" exact component={\n                                    ()=> <Suspense fallback={<div>Loading...</div>}>\n                                       <PaymentResultPage/>\n                                    </Suspense>\n                                } />\n\n\n\n                                <Route path = \"/login\" exact component={() =>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <SignIn />\n                                    </Suspense>\n                                }\n                                />\n                            </div>\n                        </CartProvider>\n                   </CategoriesProvider>\n                </div>\n            </Switch>\n        </Router>\n\n     </MuiThemeProvider>\n    );\n}",["233","234"],"/Users/andreia/WebstormProjects/freelance-website-react/src/contexts/CartContext.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/contexts/CategoriesContext.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/Navbar.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Cart.tsx",["235","236"],"import React, {useContext, useEffect, useState} from 'react';\nimport CartProducts from './CartProducts';\nimport {CartContext} from \"../contexts/CartContext\";\nimport {fetchProduct} from \"../repositories/ProductRepository\";\nimport {ProductQuantity} from \"./CartItem\";\nimport {isUserLoggedIn} from \"../utils/UserManager\";\n\n\nconst Cart = () => {\n\n    const context = useContext(CartContext)\n\n\n    const [cartProducts, setCartProducts] = useState(new Array<ProductQuantity>())\n\n    const [totalPrice ,setTotalPrice] = useState(0)\n\n    const [canCheckout, setCanCheckout] = useState(false)\n\n    const  productsIDs = context.productsIDs\n\n    useEffect(()=>{\n        let record : {[productID:number]: number} = {}\n        let tempPrice = 0\n        let tempCartProducts:Array<ProductQuantity> = []\n\n        productsIDs.forEach((id)=>{\n            if(record[id] === undefined){\n                record[id] = 0\n            }\n            record[id] ++\n        })\n        let promises = []\n        for (let key in record){\n            promises.push(fetchProduct(parseInt(key)).then(response=>{\n                let productQuantity:ProductQuantity={\n                    product:response.data,\n                    quantity : record[key]\n                }\n                tempCartProducts.push(productQuantity)\n                tempPrice += (productQuantity.quantity * productQuantity.product.price)\n            }).catch(error=>{\n                console.log(error)\n            }))\n        }\n        Promise.all(promises).then(()=>{\n            setTotalPrice(tempPrice)\n            setCartProducts(tempCartProducts)\n            validateCart(tempCartProducts)\n        })\n\n    },[productsIDs])\n\n    const handleCheckout = ()=>{\n        if(canCheckout){\n            if(isUserLoggedIn()){\n                window.location.href = \"/pay\"\n\n            }else{\n                window.location.href = \"/login\"\n            }\n        }else{\n\n            // @ts-ignore\n            $('#cartErrorModal').modal('show')\n        }\n    }\n\n    function validateCart(products:Array<ProductQuantity>){\n        let valid = true\n        products.forEach(productQuantity=>{\n            if(productQuantity.product.stock === 0 || productQuantity.quantity > productQuantity.product.stock){\n                valid = false\n            }\n        })\n        setCanCheckout(valid)\n    }\n    return (\n        <div>\n            <div >\n                <div className=\"text-center mt-5\">\n                    <h1>Cart</h1>\n                </div>\n\n                <div className=\"row no-gutters justify-content-center\">\n                    <div className=\"col-sm-9 p-3\">\n                        {\n                            productsIDs.length > 0 ?\n\n                            <CartProducts products={cartProducts}/> :\n                            <div className=\"p-3 text-center text-muted\">\n                                Your cart is empty\n                            </div>\n                        }\n                    </div>\n                    {\n                        productsIDs.length > 0 &&\n                        <div className=\"col-sm-3 p-3\">\n                            <div className=\"card card-body\">\n                                <p className=\"mb-1\">Total Items</p>\n                                <h4 className=\" mb-3 txt-right\">{productsIDs.length}</h4>\n                                <p className=\"mb-1\">Total Payment</p>\n                                <h3 className=\"m-0 txt-right\">{\"£\" + totalPrice}</h3>\n                                <hr className=\"my-4\"/>\n                                <div className=\"text-center\">\n                                    <button type=\"button\" className=\"btn btn-primary mb-2\"  onClick={handleCheckout}>CHECKOUT</button>\n                                </div>\n\n                            </div>\n                        </div>\n                    }\n                    \n                </div>\n            </div>\n\n            <div className=\"modal fade\" id=\"cartErrorModal\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"cartErrorModal\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                             Some of the products are not available\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Cart;","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Register.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/SignIn.tsx",["237","238"],"import React, {useEffect, useState} from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Alert from '@material-ui/lab/Alert';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {fetchToken} from \"../repositories/AuthRepository\";\nimport {isUserLoggedIn} from \"../utils/UserManager\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport default function SignIn() {\n\n    if(isUserLoggedIn()){\n        window.location.href = \"/\"\n    }\n\n    const classes = useStyles();\n\n     const [usernameValue, setUsernameValue] = useState(\"\")\n     const [passwordValue, setPasswordValue] = useState(\"\")\n\n     const[usernameValid, setUsernameValid] = useState(false)\n     const[passwordValid, setPasswordValid] = useState(false)\n\n     const[errorMessage,setErrorMessage] = useState(\"\")\n\n    useEffect(()=>{\n       setUsernameValid(usernameValue.trim() !==\"\")\n       setPasswordValid(passwordValue.trim() !==\"\")\n\n    }, [usernameValue, passwordValue])\n\n\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <form className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"username\"\n                        label=\"Username\"\n                        name=\"text\"\n                        onChange={(event) => setUsernameValue(event.target.value) }\n                        autoComplete=\"username\"\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        onChange={(event)=>\n                            setPasswordValue(event.target.value)\n                        }\n                        autoComplete=\"current-password\"\n\n                    />\n                    <Alert severity=\"error\"\n                           hidden = {errorMessage.trim() === \"\"}\n\n                    >{errorMessage}</Alert>\n                    <Button\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                        onClick={()=> fetchToken(usernameValue,passwordValue).then(()=>{\n                            window.location.reload()\n                        }).catch(error=>{\n                            setErrorMessage(error)\n                        })}\n                        disabled={!(usernameValid && passwordValid)}>\n                        Sign In\n                    </Button>\n                    <Grid container>\n                        <Grid item xs>\n                            <Link  href=\"#\" variant=\"body2\">\n                                Forgot password?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"/register\" variant=\"body2\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n            <Box mt={8}>\n            </Box>\n        </Container>\n    );\n}\n","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/ExpandedProduct.tsx",["239","240","241"],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/ProductsPage.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Home.tsx",["242","243","244","245","246","247"],"import React, {useContext, useEffect, useState} from \"react\";\nimport {Category, fetchCategories} from \"../repositories/ProductRepository\";\nimport image from '../baby-yoda.jpg'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport {CategoriesContext} from \"../contexts/CategoriesContext\";\n\nexport default function Home(){\n\n   const categoryContext = useContext(CategoriesContext)\n\n\n\n    return (\n        <div className={\"container mt-5 \"}>\n            <div className={\"row\"}>\n                <div className=\"col-md-12\">\n                    <div className=\"jumbotron\">\n                        <h2 className=\"h2-responsive\">Welcome to our website</h2>\n                        <hr/>\n                            <p className={\"mt-5\"}>We have items made by our artists</p>\n                                <p>Click on one of the categories below to check the products</p>\n\n                       </div>\n                </div>\n            </div>\n             <div className={\"row\"}>\n                 <div className = {\"col\"}>\n                     <Typography variant=\"h4\" component=\"h2\">\n                         Categories\n                     </Typography>\n                 </div>\n\n             </div>\n           \n            <div className={\"row container-categories mt-5\"} >\n\n                {\n                     categoryContext.categories && categoryContext.categories.map((category)=>{\n                        return(\n\n                            <div className={\"col\"}>\n                            <Card className={\"card-style\"} onClick={()=> window.location.href =\"/products?category=\" + category.name}>\n                                <CardActionArea >\n                                    <CardMedia\n                                        component=\"img\"\n                                        height=\"200\"\n                                        image= {category.image.imageURl}\n                                        title= {category.name}\n                                    />\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                            {category.name}\n                                        </Typography>\n                                    </CardContent>\n                                </CardActionArea>\n                            </Card>\n                            </div>\n                        )\n                    })\n\n                }\n            </div>\n        </div>\n    )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/Dashboard.tsx",["248"],"import React from 'react';\nimport {\n  Container,\n  Grid\n} from '@material-ui/core';\nimport TotalAmount from './TotalAmount';\nimport LatestOrders from './LatestOrders';\nimport TasksProgress from './TasksProgress';\nimport TotalCustomers from './TotalCustomers';\n\nimport AddProductModal from \"../../AddProductModal\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from '@material-ui/icons/Add';\nimport LatestProducts from \"./LatestProducts\";\nimport AddCategoryModal from \"../../modals/AddCategoryModal\";\nimport TotalProducts from \"./TotalAvailableProducts\";\nconst Dashboard = () => {\n\n\n\n  return (\n      <Container maxWidth={false} className={\"mt-4\"}>\n        <Grid\n          container\n          spacing={3}\n        >\n          <Grid\n            item\n            lg={3}\n            sm={6}\n            xl={3}\n            xs={12}\n          >\n            <TotalAmount />\n          </Grid>\n          <Grid\n            item\n            lg={3}\n            sm={6}\n            xl={3}\n            xs={12}\n          >\n            <TotalCustomers />\n          </Grid>\n          <Grid\n              item\n              lg={3}\n              sm={6}\n              xl={3}\n              xs={12}\n          >\n            <TotalProducts />\n          </Grid>\n\n\n          <Grid\n            item\n            lg={8}\n            md={12}\n            xl={9}\n            xs={12}\n          >\n            <LatestProducts />\n          </Grid>\n          <Grid\n              item\n            lg={4}\n            md={12}\n            xl ={3}\n            xs = {12}\n            >\n            <div className={\"wrapper-button-center mt-5\"}>\n            <Button type=\"button\"\n                    variant=\"contained\"\n                    color={\"primary\"}\n                    className=\"btn btn-primary\"\n                    data-toggle=\"modal\"\n                    data-target=\"#addProductModal\"\n                    startIcon={<AddIcon />}\n            >\n              Add product\n            </Button>\n            <AddProductModal />\n            </div>\n            <div className={\"wrapper-button-center mt-5\"}>\n              <Button type=\"button\"\n                      variant=\"contained\"\n                      color={\"primary\"}\n                      className=\"btn btn-primary\"\n                      data-toggle=\"modal\"\n                      data-target=\"#addCategoryModal\"\n                      startIcon={<AddIcon />}\n              >\n                Add Category\n              </Button>\n              <AddCategoryModal />\n            </div>\n        </Grid>\n          <Grid\n            item\n            lg={4}\n            md={6}\n            xl={3}\n            xs={12}\n          >\n          </Grid>\n          <Grid\n            item\n            lg={4}\n            md={6}\n            xl={3}\n            xs={12}\n          >\n          </Grid>\n          <Grid\n            item\n            lg={12}\n            md={12}\n            xl={12}\n            xs={12}\n          >\n            <LatestOrders />\n          </Grid>\n        </Grid>\n      </Container>\n  );\n};\n\nexport default Dashboard;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TasksProgress.js",["249"],"import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  LinearProgress,\n  Typography,\n  makeStyles,\n  colors\n} from '@material-ui/core';\nimport InsertChartIcon from '@material-ui/icons/InsertChartOutlined';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.orange[600],\n    height: 56,\n    width: 56\n  }\n}));\n\nconst TasksProgress = (\n) => {\n  const classes = useStyles();\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              TASKS PROGRESS\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              75.5%\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <InsertChartIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box mt={3}>\n          <LinearProgress\n            value={75.5}\n            variant=\"determinate\"\n          />\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nTasksProgress.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TasksProgress;\n",["250","251"],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalProfit.js",["252","253","254"],"import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  makeStyles,\n  colors\n} from '@material-ui/core';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\n\nconst TotalProfit = () => {\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              TOTAL PROFIT\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              $23,200\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar >\n              <AttachMoneyIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nTotalProfit.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalProfit;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/StorageHandler.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/Utils.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/LiveSearch.ts",["255"],"import {fetchSearchSuggestions, ProductModel} from \"../repositories/ProductRepository\";\nimport {BASE_URL_IMAGES} from \"../utils/ApiConstants\";\n\nlet suggestionConstainer = document.createElement(\"div\")\nsuggestionConstainer.setAttribute(\"id\", \"autocomplete-list\");\nsuggestionConstainer.setAttribute(\"class\", \"autocomplete-items\");\n\n\nclass SuggestionFactory{\n\n    createSuggestion(product:ProductModel){\n        return  new ProductSuggestion(product).suggestionView\n    }\n}\n\nclass ProductSuggestion{\n    public suggestionView: HTMLDivElement;\n\n    constructor(product:ProductModel) {\n        let name = product.name;\n        let id = product.productID;\n\n        this.suggestionView = document.createElement(\"div\");\n        let image = document.createElement(\"img\");\n        image.className = \"postSuggestionImage\";\n        image.src =  product.images[0].imageURl;\n        this.suggestionView.append(image);\n\n        this.suggestionView.innerHTML += name;\n\n        /*execute a function when someone clicks on the item value (DIV element):*/\n        this.suggestionView.addEventListener(\"click\", function (e) {\n            window.location.href = \"/product/\" + id\n        });\n    }\n}\n\nexport function performSearch(query :string){\n    if(query.trim()!== \"\") {\n        fetchSearchSuggestions(query).then(response => {\n            insertSuggestions(response.data)\n        }).catch(error => {\n            console.log(error)\n        })\n    }else{\n        clearSuggestionsList()\n    }\n}\n\n\nconst suggestionFactory = new  SuggestionFactory()\n\n\n\nfunction insertSuggestions(products : Array<ProductModel>){\n    clearSuggestionsList()\n    let searchField = document.getElementById(\"search-products-field\");\n    if(searchField?.parentNode != null){\n        //insert the suggestions postsSuggestionContainer as a child in the search field\n        searchField.parentNode.appendChild(suggestionConstainer);\n        //insert all available suggestions\n        products.forEach(product => {\n            suggestionConstainer.appendChild(suggestionFactory.createSuggestion(product));\n        });\n    }\n}\n\nfunction clearSuggestionsList() {\n    suggestionConstainer.innerHTML = \"\";\n}\n","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/OrderRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/NetworkExecutor.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/ProductRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/AuthRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/ReviewsRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/utils/UserManager.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/CartProducts.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/Product.tsx",["256","257","258"],"\n// @ts-ignore\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {ProductModel} from '../repositories/ProductRepository'\nimport {BASE_URL_IMAGES} from \"../utils/ApiConstants\";\nimport {Alert} from \"@material-ui/lab\";\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        marginTop: 20\n    },\n});\n\ntype Props ={\n    product:ProductModel\n}\n\n function Product(props : Props) {\n\n    const classes = useStyles();\n\n    const product = props.product\n     \n    return (\n        <Card className={classes.root}\n           onClick= {()=> {window.location.href = \"/product/\" + product.productID }}\n        >\n            <CardActionArea  style={product.stock ===0 ?{opacity : 0.5} :  {}}>\n                <CardMedia\n                    component=\"img\"\n                    alt={product.name}\n                    height=\"200\"\n                    image= {product.images[0]?.imageURl}\n                    title= {product.name}\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {product.name}\n                    </Typography>\n                    <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                        {\"£\" + product.price }\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            {\n                product.stock ===0 &&\n                <Alert severity=\"warning\">Out of stock!</Alert>\n            }\n        </Card>\n    );\n\n}\nexport default Product","/Users/andreia/WebstormProjects/freelance-website-react/src/components/CarouselImages.tsx",["259"],"import {ProductImage} from \"../repositories/ProductRepository\";\nimport React from \"react\";\nimport {BASE_URL_IMAGES} from \"../utils/ApiConstants\";\n\n type props ={\n    images : Array<ProductImage>\n}\n\nexport default function CarouselImages (props: props){\n\n    let imagesItems = props.images.map((productImage,index)=>{\n        return ( <div className= {index ===0 ? \"carousel-item active\" : \"carousel-item\"} key={index + \"image\"}>\n                <img className=\"d-block w-100\" src={productImage.imageURl} alt=\"First slide\"/>\n            </div>)\n\n    })\n\n    let indicatorItems = props.images.map((product,index)=>{\n         return ( <li data-target=\"#carouselExampleIndicators\"  key = {product.imageURl} data-slide-to={index} className={index ===0 ? \"active\" : \"\"}/>)\n    })\n\n\n    return (\n                <div id=\"carouselExampleControls\" className=\"carousel slide\"   data-ride=\"carousel\">\n                    <ol className=\"carousel-indicators\">\n                        {indicatorItems}\n                    </ol>\n                    <div className=\"carousel-inner\">\n                        {imagesItems}\n                    </div>\n                    <a className=\"carousel-control-prev\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"prev\">\n                        <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n                        <span className=\"sr-only\">Previous</span>\n                    </a>\n                    <a className=\"carousel-control-next\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"next\">\n                        <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n                        <span className=\"sr-only\">Next</span>\n                    </a>\n                </div>\n\n    )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/WriteReviewModal.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalAmount.tsx",["260","261","262","263","264"],"import React, {useEffect, useState} from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport {fetchTotalAmount, fetchTotalCustomers} from \"../../../repositories/AnalyticsRepository\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport {errorState, useRequestState} from \"../../../utils/State\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.red[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.red[900]\n  },\n  differenceValue: {\n    color: colors.red[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst TotalAmount = () => {\n  const classes = useStyles();\n\n  const [totalAmount,setTotalAmount] = useRequestState()\n\n  useEffect(()=>{\n        fetchTotalAmount().then(response=>{\n            setTotalAmount(response.data.total)\n        }).catch((error)=>{\n          setTotalAmount(errorState(error))\n        })\n  })\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n             TOTAL AMOUNT\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              {\"£\" +totalAmount}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <MoneyIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n          mt={2}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <Typography\n            color=\"textSecondary\"\n            variant=\"caption\"\n          >\n            In the last 30 days\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nTotalAmount.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalAmount;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalCustomers.tsx",["265","266"],"import React, {useEffect, useState} from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport PeopleIcon from '@material-ui/icons/PeopleOutlined';\nimport {fetchTotalCustomers, TotalCustomersResponse} from \"../../../repositories/AnalyticsRepository\";\nimport {errorState, instanceOfSuccess, successState, useRequestState} from \"../../../utils/State\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.green[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.green[900]\n  },\n  differenceValue: {\n    color: colors.green[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst TotalCustomers = () => {\n  const classes = useStyles();\n\n  const [totalCustomersResponse, setTotalCustomersResponse] = useRequestState<TotalCustomersResponse>()\n\n  useEffect(()=>{\n    fetchTotalCustomers().then((response)=>{\n      setTotalCustomersResponse(successState(response.data))\n    }).catch(error=>{\n        setTotalCustomersResponse(errorState(error))\n    })\n  })\n\n  return (\n    <Card>\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              TOTAL CUSTOMERS\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              {\n                instanceOfSuccess(totalCustomersResponse) && totalCustomersResponse.data.total\n              }\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <PeopleIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n          mt={2}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <ArrowUpwardIcon className={classes.differenceIcon} />\n          <Typography\n            className={classes.differenceValue}\n            variant=\"body2\"\n          >\n            { instanceOfSuccess(totalCustomersResponse) && totalCustomersResponse.data.newUsersThisMonth}\n          </Typography>\n          <Typography\n            color=\"textSecondary\"\n            variant=\"caption\"\n          >\n            New Customers in the last 30 days\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nTotalCustomers.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalCustomers;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/LatestOrders.tsx",["267"],"import React, {useEffect, useState} from 'react';\n\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Chip,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip\n} from '@material-ui/core';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport {Order, OrderStatus, UpdateOrderModel} from \"../../../entities/Order\";\nimport {getOrders} from \"../../../repositories/AnalyticsRepository\";\nimport {ConfirmationModal} from \"../../ConfirmationModal\";\nimport {updateOrder} from \"../../../repositories/OrderRepository\";\nimport {CHANGE_ORDER_STATUS} from \"../../../utils/Messages\";\nimport {v4 as uuidv4} from \"uuid\";\n\n\n\nconst LatestOrders = () => {\n\n    const [latestOrders,setLatestOrders] = useState<Array<Order>>([])\n\n    useEffect(()=>{\n        fetchMoreOrders()\n    },[])\n\n\n    const fetchMoreOrders = ()=>{\n        getOrders(currentPage).then(response=>{\n            setCurrentPage(prevState =>  prevState + 1)\n            setLatestOrders(prevState => prevState.concat(response.data))\n        }).catch(error=>{\n\n        })\n    }\n\n    const [changedOrder,setChangedOrder] = useState<UpdateOrderModel>()\n    const [confirmationMessage,setConfirmationMessage] = useState(\"\")\n    const [currentPage,setCurrentPage] = useState(1)\n\n\n\n\n    const handleChangeOrder = (order:Order,newOrderStatus:OrderStatus) =>{\n      setChangedOrder({orderID :order.orderID, newOrderStatus: newOrderStatus})\n      setConfirmationMessage(CHANGE_ORDER_STATUS(newOrderStatus))\n   }\n   const performChangeOrder = ()=>{\n      if(changedOrder){\n      updateOrder({newOrderStatus : changedOrder.newOrderStatus,orderID: changedOrder.orderID}).then(()=>{\n       let index  = latestOrders.findIndex(order => order.orderID === changedOrder.orderID)\n       latestOrders[index].orderStatus = changedOrder.newOrderStatus\n       let newOrdersList = [...latestOrders]\n       setLatestOrders(newOrdersList)\n       // @ts-ignore\n       $('#confirmationModalOrderChanged').modal('hide')\n     }).catch(error=>{\n       // @ts-ignore\n       $('#confirmationModalOrderChanged').modal('hide')\n     })\n      }\n   }\n\n\n  return (\n    <Card\n    >\n      <CardHeader title=\"Latest Orders\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={800}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  Order Ref\n                </TableCell>\n                <TableCell>\n                  Customer\n                </TableCell>\n                <TableCell sortDirection=\"desc\">\n                  <Tooltip\n                    enterDelay={300}\n                    title=\"Sort\"\n                  >\n                    <TableSortLabel\n                      active\n                      direction=\"desc\"\n                    >\n                      Date\n                    </TableSortLabel>\n                  </Tooltip>\n                </TableCell>\n                <TableCell>\n                  Status\n                </TableCell>\n                <TableCell/>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {\n                  latestOrders.length > 0 &&\n                  latestOrders.map((order) => (\n                <TableRow\n                  hover\n                  key={uuidv4()}\n                >\n                  <TableCell>\n                    {order.orderID}\n                  </TableCell>\n                  <TableCell>\n                    {order.user.username}\n                  </TableCell>\n                  <TableCell>\n                    {order.created}\n                  </TableCell>\n                  <TableCell>\n                    <Chip\n                      color=\"primary\"\n                      label={order.orderStatus}\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"dropdown\">\n                      <MoreVertIcon className=\"dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\"\n                              data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Dropdown\n                      </MoreVertIcon>\n\n                      <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                        <button className=\"dropdown-item\" type=\"button\" data-toggle=\"modal\" data-target=\"#confirmationModalOrderChanged\" onClick={()=>handleChangeOrder(order,OrderStatus.DELIVERED)}>Mark as delivered</button>\n                        <button className=\"dropdown-item\" type=\"button\" data-toggle=\"modal\" data-target=\"#confirmationModalOrderChanged\" onClick={()=>handleChangeOrder(order,OrderStatus.PENDING)}>Mark as pending</button>\n                        <button className=\"dropdown-item\" type=\"button\" data-toggle=\"modal\" data-target=\"#confirmationModalOrderChanged\" onClick={()=>handleChangeOrder(order,OrderStatus.REFUNDED)}>Mark as refunded</button>\n                      </div>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-end\"\n        p={2}\n      >\n        <Button\n          className={\"view-more-button\"}\n          onClick={fetchMoreOrders}\n          endIcon={<ArrowRightIcon />}\n          size=\"small\"\n          variant=\"text\"\n        >\n          View more\n        </Button>\n      </Box>\n      {\n        confirmationMessage.trim() !== \"\" &&\n      <ConfirmationModal confirmationText={confirmationMessage} onConfirm={performChangeOrder}/>\n       }\n    </Card>\n  );\n};\n\n\nexport default LatestOrders;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/AddProductModal.tsx",["268"],"import {createProduct} from \"../repositories/ProductRepository\";\nimport {useContext, useEffect, useState} from \"react\";\nimport {CategoriesContext} from \"../contexts/CategoriesContext\";\nimport {ProductCreationModel} from \"../repositories/ProductModels\";\nimport {create} from \"domain\";\n\nexport default function AddProductModal() {\n\n    const context = useContext(CategoriesContext)\n\n    const [productName, setProductName] = useState(\"\")\n    const [productPrice,setProductPrice] = useState(0)\n    const [productStock,setProductStock] = useState(0)\n    const [productDescription,setProductDescription] = useState(\"\")\n    const [images,setImages] = useState(FileList.prototype)\n    const [categoryID, setCategoryID] = useState(-1)\n\n\n    const [isFormValid, setIsFormValid] = useState(false)\n\n\n    const handleCreateProduct = () =>{\n        let model :ProductCreationModel = {\n            productName : productName,\n            price : productPrice,\n            categoryID : categoryID,\n            images : [],\n            description : productDescription,\n            stock: productStock\n        }\n\n        createProduct(model,images).then((data)=>[\n            // @ts-ignore\n            $('#addProductModal').modal('hide')\n        ]).catch(error =>{\n            console.log(error)\n        })\n    }\n\n\n    useEffect(()=>{\n        setIsFormValid(productName.trim() !== \"\" && productPrice >0 && images !== FileList.prototype && categoryID !== -1 && productStock > 0 && productDescription.trim().length > 0)\n    },[productName, productPrice, images, categoryID, productStock, productDescription])\n\n        return(\n    <div className=\"modal fade\" id=\"addProductModal\" tabIndex={-1} aria-labelledby=\"addProductModal\" aria-hidden=\"true\">\n        <div className=\"modal-dialog modal-dialog-centered\">\n            <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">Add product</h5>\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-name\" className=\"col-form-label\">Product name</label>\n                            <input type=\"text\" className=\"form-control\" id=\"product-name\"\n                                   onChange={(event) => setProductName(event.target.value)}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-price\" className=\"col-form-label\">Product price</label>\n                            <input type=\"number\" className=\"form-control\" id=\"product-price\"\n                                   onChange={(event) => setProductPrice(parseInt(event.target.value))}/>\n                        </div>\n                     <div className=\"form-group\">\n                         <label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">Category</label>\n                         <select className=\"custom-select my-1 mr-sm-2\" id=\"inlineFormCustomSelectPref\" defaultValue={-1} onChange={(event)=>{\n                            setCategoryID(parseInt(event.target.value))\n                         }}>\n                             <option value={-1} key={\"Choose...\"}>Choose...</option>\n                             {context.categories.map(category =>{\n                                 return  <option value={category.id} key={category.name}>{category.name}</option>\n                             })}\n                         </select>\n\n                     </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-stock\" className=\"col-form-label\">Products in stock</label>\n                            <input type=\"number\" className=\"form-control\" id=\"product-stock\"\n                                   onChange={(event) => setProductStock(parseInt(event.target.value))}/>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-description\">Product description</label>\n                            <textarea id=\"product-description\" className=\"form-control text-area\" name=\"product-description\"\n                                      rows={3} onChange={(event) => setProductDescription(event.target.value) }/>\n                        </div>\n\n                        <input type=\"file\" id=\"product-images\" multiple onChange={(event) => {\n                            if (event.target.files != null) {\n                                setImages(event.target.files)\n                            }\n\n                        }}/>\n\n                    </form>\n                </div>\n                <div className=\"modal-footer\">\n                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" >Close</button>\n                    <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\"\n                            disabled={!isFormValid}\n                            onClick={() => handleCreateProduct()}\n                    >Finish\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n        )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/LatestProducts.tsx",["269"],"import React, {useContext, useEffect, useState} from 'react';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Chip,\n  Divider, IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n\n} from '@material-ui/core';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport {fetchProductsByPage, ProductModel, pushDeleteProduct} from \"../../../repositories/ProductRepository\";\nimport ModifyProductModal from \"../../ModifyProductModal\";\n\nimport {IncreaseStockModal} from \"../../modals/IncreaseStockModal\";\nimport {CategoriesContext} from \"../../../contexts/CategoriesContext\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport {ConfirmationModal} from \"../../ConfirmationModal\";\nimport {CONFIRM_DELETE_PRODUCT} from \"../../../utils/Messages\";\n\nconst  LatestProducts = () => {\n\n  const [latestProducts,setLatestProducts] = useState<Array<ProductModel>>([])\n\n  const [editProduct,setEditProduct] = useState<ProductModel>()\n\n  const [deleteProduct,setDeleteProduct] = useState<ProductModel>()\n\n  const [productsPage,setProductsPage] = useState(1)\n\n  const  categories = useContext(CategoriesContext).categories\n\n  const [isRequestExecuting,setIsRequestExecuting] = useState(false)\n\n\nconst fetchMoreProducts = ()=>{\n    if(!isRequestExecuting) {\n      setIsRequestExecuting(true)\n      fetchProductsByPage(productsPage).then(response => {\n        setProductsPage(prevState => prevState + 1)\n        setLatestProducts(prevState => prevState.concat(response.data))\n        setIsRequestExecuting(false)\n      }).catch(error => {\n        setIsRequestExecuting(false)\n      })\n    }\n}\n\n  const performDeleteProduct = () =>{\n    closeConfirmationModal()\n    if(deleteProduct) {\n      pushDeleteProduct(deleteProduct.productID).then((result) => {\n        let index = latestProducts.findIndex(product => product.productID === deleteProduct.productID)\n        setLatestProducts(prevState => {\n           prevState.splice(index,1)\n           return [...prevState]\n        })\n      }).catch((error) => {\n      })\n    }\n     setDeleteProduct(undefined)\n  }\n\n  useEffect(()=>{\n  fetchMoreProducts()\n  },[])\n\n  function closeConfirmationModal(){\n    // @ts-ignore\n    $('#confirmationModalOrderChanged').modal('hide')\n  }\n\n  return (\n    <Card\n    >\n      <CardHeader title=\"Recently added products\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={800}>\n          <Table>\n            <TableHead >\n              <TableRow>\n                <TableCell >\n                </TableCell>\n                <TableCell>\n                Name\n                </TableCell>\n                <TableCell sortDirection=\"desc\">\n                   Price\n                </TableCell>\n                <TableCell>\n                  Stock\n                </TableCell>\n                <TableCell>\n                  Category\n                </TableCell>\n                <TableCell/>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {latestProducts.map((product) => (\n                <TableRow\n                  hover\n                  key={product.productID}\n                >\n                  <TableCell>\n                    {product.productID}\n                  </TableCell>\n                  <TableCell>\n                    {product.name}\n                  </TableCell>\n                  <TableCell>\n                    {\"£\" + product.price}\n                  </TableCell>\n                  <TableCell>\n                    <Chip\n                      color=\"primary\"\n                      label={product.stock}\n                      size=\"small\"\n                    />\n                    <IconButton aria-label=\"addStock\" data-toggle=\"modal\" data-target=\"#modalIncreaseStock\" onClick={()=>setEditProduct(product)}>\n                      <EditIcon color={\"primary\"} />\n                    </IconButton>\n                  </TableCell>\n                  <TableCell>\n                    {product.category.name}\n                  </TableCell>\n                  <TableCell>\n                  <Button variant=\"contained\" color=\"primary\" data-toggle=\"modal\" data-target=\"#modifyProductModal\"  onClick={()=>setEditProduct(product)}>\n                    Edit\n                  </Button>\n                  </TableCell>\n                  <TableCell>\n                    <Button className={\"delete-button\"}\n                        onClick={()=>setDeleteProduct(product)}\n                        data-toggle=\"modal\"\n                        data-target=\"#confirmationModalOrderChanged\"\n                        variant=\"contained\"\n                        startIcon={<DeleteIcon />}\n                    >\n                      Delete\n                    </Button>\n                  </TableCell>\n\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-end\"\n        p={2}\n      >\n        <Button\n          onClick={()=>fetchMoreProducts()}\n          className={\"view-more-button\"}\n          endIcon={<ArrowRightIcon />}\n          size=\"small\"\n          variant=\"text\"\n        >\n          View more\n        </Button>\n      </Box>\n      <div id={\"container-modal\"}>\n        {\n          editProduct &&\n          //@ts-ignore\n          <ModifyProductModal state={[editProduct, setEditProduct]}  categories={categories}/>\n        }\n        {editProduct &&\n            //@ts-ignore\n        <IncreaseStockModal stateEditProduct={[editProduct, setEditProduct]} state={[latestProducts, setLatestProducts]} />\n        }\n        {\n          deleteProduct &&\n              <ConfirmationModal confirmationText={CONFIRM_DELETE_PRODUCT(deleteProduct.productID)} onConfirm={performDeleteProduct} />\n        }\n      </div>\n    </Card>\n  );\n};\n\nLatestProducts.propTypes = {\n  className: PropTypes.string\n};\n\nexport default LatestProducts;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/AddCategoryModal.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/utils/ApiConstants.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/utils/ImageUtils.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/requests/ApiRequest.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/AnalyticsRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/utils/Messages.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/CategoriesRepository.ts",["270"],"import  {makeAPICall} from \"./NetworkExecutor\";\nimport {URL_CREATE_CATEGORY} from \"../utils/ApiConstants\";\nimport {ApiRequest, HTTPMethods} from \"./requests/ApiRequest\";\n\n interface CategoryCreationModel {\n    categoryName :string,\n     imageData:string\n}\nexport function makeCreateCategoryCall(creationModel :CategoryCreationModel){\n      return makeAPICall(new ApiRequest(URL_CREATE_CATEGORY,HTTPMethods.POST,JSON.stringify(creationModel)))\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/components/ConfirmationModal.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/CartItem.tsx",["271"],"import React, { useContext } from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport {BASE_URL_IMAGES} from \"../utils/ApiConstants\";\nimport {CartContext} from \"../contexts/CartContext\";\nimport {ProductModel} from \"../repositories/ProductRepository\";\nimport {Alert} from \"@material-ui/lab\";\n\nexport type ProductQuantity ={\n    product:ProductModel,\n    quantity:number\n}\n\n\nconst CartItem = (props:ProductQuantity) => {\n      let product = props.product\n      let quantity  = props.quantity\n      const context = useContext(CartContext)\n\n    return (\n                <div className=\"row no-gutters py-2\">\n                    <div className=\"col-sm-2 p-2\">\n                        <img\n                            alt={product.name}\n                            style={{margin: \"0 auto\", maxHeight: \"50px\"}}\n                            src={product.images[0]?.imageURl} className=\"img-fluid d-block\"/>\n                    </div>\n                    <div className=\"col-sm-4 p-2\">\n                        <h5 className=\"mb-1\">{product.name}</h5>\n                        <p className=\"mb-1\">Price: {\"£\" + product.price} </p>\n\n                    </div>\n                    <div className=\"col-sm-2 p-2 text-center \">\n                        <p className=\"mb-0\">Quantity: {quantity}</p>\n                    </div>\n                    <div className=\"col-sm-4 p-2 text-right\">\n                        <button\n                            onClick={() => {\n                               context.addProduct(product.productID)\n                            }\n                            }\n                            className=\"btn btn-primary btn-sm mr-2 mb-1\">\n                            <AddIcon width={\"20px\"}/>\n                        </button>\n\n                        {\n                            quantity > 1 &&\n                            <button\n                                onClick={() => context.removeProduct(product.productID)}\n                                className=\"btn btn-danger btn-sm mb-1\">\n                                <RemoveIcon width={\"20px\"}/>\n                            </button>\n                        }\n\n                        {\n                            quantity === 1 &&\n                            <button\n                                onClick={() => context.removeProduct(product.productID)}\n                                className=\"btn btn-danger btn-sm mb-1\">\n                                <DeleteIcon width={\"20px\"}/>\n                            </button>\n                        }\n\n                    </div>\n                    {\n                       product.stock === 0 &&\n                        <Alert severity=\"error\">Unfortunately the product is no longer in stock</Alert>\n                    }\n                    {\n                        product.stock > 0 && props.quantity > product.stock &&\n                        <Alert severity=\"error\">Unfortunately we only have {product.stock} in stock </Alert>\n                    }\n                </div>\n            )\n\n}\n \nexport default CartItem;","/Users/andreia/WebstormProjects/freelance-website-react/src/entities/Order.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/IncreaseStockModal.tsx",["272"],"import {increaseStock, ProductModel} from \"../../repositories/ProductRepository\";\nimport {ChangeEvent, Dispatch, SetStateAction, useEffect, useState} from \"react\";\n\n\ntype Props = {\n    stateEditProduct: [product :ProductModel,setProductModel:Dispatch<SetStateAction<ProductModel>>],\n    state: [Array<ProductModel>,Dispatch<SetStateAction<Array<ProductModel>>>]\n}\nexport function IncreaseStockModal(props:Props){\n\n      const [latestProducts,setLatestProducts] = props.state\n      const [editProduct,setEditProduct] = props.stateEditProduct\n\n     const [productStock,setProductStock] = useState(editProduct.stock)\n\n    useEffect(()=>{\n        setProductStock(editProduct.stock)\n    },[editProduct])\n\n\n    const handleStockValueChanged = (event :ChangeEvent<HTMLInputElement>) =>{\n          setProductStock(parseInt(event.target.value))\n    }\n    const handleIncreaseStock = () =>{\n          increaseStock(editProduct.productID,productStock).then(result=>{\n              let index = latestProducts.findIndex(predicate=>predicate.productID === editProduct.productID)\n              latestProducts[index].stock = productStock\n              setLatestProducts([...latestProducts])\n              // @ts-ignore\n              $('#modalIncreaseStock').modal('hide')\n          }).catch(error=>{\n              // @ts-ignore\n              $('#modalIncreaseStock').modal('hide')\n          })\n    }\n\n\n    return(\n        <div className=\"modal fade\" id=\"modalIncreaseStock\" tabIndex={-1} role=\"dialog\"\n             aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Modal title</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-stock\" className=\"col-form-label\">New stock</label>\n                            <input type=\"number\" className=\"form-control\" id=\"product-stock\"\n                                   onChange={handleStockValueChanged}/>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={()=>handleIncreaseStock()}>Save changes</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/ModifyProductModal.tsx",["273"],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/PaymentRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/PaymentResult.tsx",["274","275"],"import {useLocation} from \"react-router-dom\";\nimport {placeOrder} from \"../repositories/OrderRepository\";\nimport {useContext} from \"react\";\nimport { CartContext } from \"../contexts/CartContext\";\nimport {validatePaymentReference} from \"../repositories/PaymentRepository\";\nimport {navigateHome} from \"../helpers/RouterUtils\";\nimport {deleteCartItems} from \"../components/StorageHandler\";\n\nexport default function PaymentResult(){\n    function useQueryParams() {\n        return new URLSearchParams(useLocation().search);\n    }\n    let queryParams = useQueryParams()\n    let success = queryParams.get(\"success\")\n    let canceled = queryParams.get(\"canceled\")\n    let productsIDs = useContext(CartContext).productsIDs\n    let paymentReference= queryParams.get(\"referenceID\")\n\n    if(success === \"true\" && paymentReference != null){\n        validatePaymentReference(paymentReference).then((response)=>{\n            if(response.data.valid) {\n                continueFlow()\n            }else{\n                navigateHome()\n            }\n        }).catch(()=>{\n            navigateHome()\n        })\n\n    }\n\n    function continueFlow(){\n        if(paymentReference != null) {\n            placeOrder(productsIDs, paymentReference).then(() => {\n               deleteCartItems()\n            }).catch(() => {\n                \n            })\n        }\n\n    }\n\n\n    return (\n            <div className=\"row\">\n                <div className=\"col-md-6 mx-auto mt-5\">\n                    <div className=\"payment\">\n                        <div className={success === \"true\" ? \"payment_header-success\":\"payment_header-fail\"}>\n                            <div className=\"check\"><i className=\"fa fa-check\" aria-hidden=\"true\"></i></div>\n                        </div>\n                            {success === \"true\" &&\n                                <div className=\"content-success\">\n                                <h1>Payment Successful !</h1>\n                                <a href=\"#\">Go to Main Page</a>\n                                </div>\n                            }\n                            {(success === \"false\" || canceled === \"true\") &&\n                            <div className=\"content-fail\">\n                                <h1>Payment Cancelled !</h1>\n                                <a href=\"#\">Go to Main Page</a>\n                            </div>\n                            }\n\n                    </div>\n                </div>\n            </div>\n    )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Checkout.tsx",["276","277"],"/Users/andreia/WebstormProjects/freelance-website-react/src/entities/CountriesList.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalAvailableProducts.tsx",["278","279","280","281","282","283"],"import React, {useEffect, useState} from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport PeopleIcon from '@material-ui/icons/PeopleOutlined';\nimport {\n  fetchTotalCustomers, fetchTotalNumberAvailableProducts,\n  TotalCustomersResponse,\n  TotalAvailableProductsResponse\n} from \"../../../repositories/AnalyticsRepository\";\nimport {ShoppingBasket} from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.green[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.green[900]\n  },\n  differenceValue: {\n    color: colors.green[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst TotalCustomers = () => {\n  const classes = useStyles();\n\n  const [totalProducts,setTotalProducts] = useState(0)\n\n  useEffect(()=>{\n    fetchTotalNumberAvailableProducts().then(response=>{\n       if(response.data?.total){\n          setTotalProducts(response.data.total)\n       }\n\n    })\n  },[])\n\n  return (\n    <Card>\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              TOTAL PRODUCTS\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              {totalProducts}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <ShoppingBasket />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n            mt={2}\n            display=\"flex\"\n            alignItems=\"center\"\n        >\n          <Typography\n              color=\"textSecondary\"\n              variant=\"caption\"\n          >\n            Currently available on the website\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nTotalCustomers.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalCustomers;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/State.ts",["284"],"\nexport interface State<T>{}\n\nexport interface SuccessState<T> extends  State<T>{\n    data:T\n}\n\nexport interface ErrorState<T> extends State<T>{\n    error:string\n}\n\nexport interface LoadingState extends State<undefined>{\n\n}\n\n\nexport function instanceOfSuccess <T> (object: State<T>): object is SuccessState<T> {\n    return 'data' in object;\n}\n\n","/Users/andreia/WebstormProjects/freelance-website-react/src/helpers/RouterUtils.ts",[],{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","severity":1,"message":"290","line":10,"column":9,"nodeType":"291","messageId":"292","endLine":10,"endColumn":13},{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","severity":1,"message":"293","line":20,"column":24,"nodeType":"291","messageId":"292","endLine":20,"endColumn":38},{"ruleId":"294","severity":1,"message":"295","line":35,"column":60,"nodeType":"296","messageId":"297","endLine":42,"endColumn":14},{"ruleId":"289","severity":1,"message":"298","line":6,"column":8,"nodeType":"291","messageId":"292","endLine":6,"endColumn":24},{"ruleId":"289","severity":1,"message":"299","line":7,"column":8,"nodeType":"291","messageId":"292","endLine":7,"endColumn":16},{"ruleId":"289","severity":1,"message":"300","line":1,"column":16,"nodeType":"291","messageId":"292","endLine":1,"endColumn":24},{"ruleId":"289","severity":1,"message":"301","line":1,"column":26,"nodeType":"291","messageId":"292","endLine":1,"endColumn":40},{"ruleId":"302","severity":1,"message":"303","line":64,"column":7,"nodeType":"304","endLine":64,"endColumn":9,"suggestions":"305"},{"ruleId":"289","severity":1,"message":"306","line":1,"column":28,"nodeType":"291","messageId":"292","endLine":1,"endColumn":37},{"ruleId":"289","severity":1,"message":"307","line":1,"column":39,"nodeType":"291","messageId":"292","endLine":1,"endColumn":47},{"ruleId":"289","severity":1,"message":"308","line":2,"column":9,"nodeType":"291","messageId":"292","endLine":2,"endColumn":17},{"ruleId":"289","severity":1,"message":"309","line":2,"column":19,"nodeType":"291","messageId":"292","endLine":2,"endColumn":34},{"ruleId":"289","severity":1,"message":"310","line":3,"column":8,"nodeType":"291","messageId":"292","endLine":3,"endColumn":13},{"ruleId":"289","severity":1,"message":"311","line":4,"column":9,"nodeType":"291","messageId":"292","endLine":4,"endColumn":19},{"ruleId":"289","severity":1,"message":"312","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":21},{"ruleId":"313","severity":1,"message":"314","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":12},{"ruleId":"285","replacedBy":"315"},{"ruleId":"287","replacedBy":"316"},{"ruleId":"313","severity":1,"message":"314","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":12},{"ruleId":"313","severity":1,"message":"311","line":10,"column":3,"nodeType":"291","messageId":"292","endLine":10,"endColumn":13},{"ruleId":"313","severity":1,"message":"317","line":11,"column":3,"nodeType":"291","messageId":"292","endLine":11,"endColumn":9},{"ruleId":"289","severity":1,"message":"318","line":2,"column":9,"nodeType":"291","messageId":"292","endLine":2,"endColumn":24},{"ruleId":"289","severity":1,"message":"319","line":7,"column":8,"nodeType":"291","messageId":"292","endLine":7,"endColumn":19},{"ruleId":"289","severity":1,"message":"320","line":10,"column":8,"nodeType":"291","messageId":"292","endLine":10,"endColumn":14},{"ruleId":"289","severity":1,"message":"318","line":13,"column":9,"nodeType":"291","messageId":"292","endLine":13,"endColumn":24},{"ruleId":"289","severity":1,"message":"318","line":3,"column":9,"nodeType":"291","messageId":"292","endLine":3,"endColumn":24},{"ruleId":"289","severity":1,"message":"307","line":1,"column":27,"nodeType":"291","messageId":"292","endLine":1,"endColumn":35},{"ruleId":"289","severity":1,"message":"314","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":12},{"ruleId":"289","severity":1,"message":"321","line":14,"column":8,"nodeType":"291","messageId":"292","endLine":14,"endColumn":25},{"ruleId":"289","severity":1,"message":"322","line":16,"column":27,"nodeType":"291","messageId":"292","endLine":16,"endColumn":46},{"ruleId":"289","severity":1,"message":"323","line":17,"column":8,"nodeType":"291","messageId":"292","endLine":17,"endColumn":23},{"ruleId":"289","severity":1,"message":"307","line":1,"column":27,"nodeType":"291","messageId":"292","endLine":1,"endColumn":35},{"ruleId":"289","severity":1,"message":"314","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":12},{"ruleId":"302","severity":1,"message":"324","line":36,"column":7,"nodeType":"304","endLine":36,"endColumn":9,"suggestions":"325"},{"ruleId":"289","severity":1,"message":"326","line":5,"column":9,"nodeType":"291","messageId":"292","endLine":5,"endColumn":15},{"ruleId":"302","severity":1,"message":"327","line":75,"column":5,"nodeType":"304","endLine":75,"endColumn":7,"suggestions":"328"},{"ruleId":"289","severity":1,"message":"329","line":1,"column":8,"nodeType":"291","messageId":"292","endLine":1,"endColumn":16},{"ruleId":"289","severity":1,"message":"318","line":5,"column":9,"nodeType":"291","messageId":"292","endLine":5,"endColumn":24},{"ruleId":"289","severity":1,"message":"330","line":12,"column":26,"nodeType":"291","messageId":"292","endLine":12,"endColumn":40},{"ruleId":"289","severity":1,"message":"331","line":11,"column":20,"nodeType":"291","messageId":"292","endLine":11,"endColumn":30},{"ruleId":"332","severity":1,"message":"333","line":54,"column":33,"nodeType":"334","endLine":54,"endColumn":45},{"ruleId":"332","severity":1,"message":"333","line":60,"column":33,"nodeType":"334","endLine":60,"endColumn":45},{"ruleId":"302","severity":1,"message":"335","line":59,"column":7,"nodeType":"304","endLine":59,"endColumn":47,"suggestions":"336"},{"ruleId":"294","severity":1,"message":"295","line":105,"column":60,"nodeType":"296","messageId":"297","endLine":111,"endColumn":14},{"ruleId":"289","severity":1,"message":"314","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":12},{"ruleId":"289","severity":1,"message":"323","line":14,"column":8,"nodeType":"291","messageId":"292","endLine":14,"endColumn":23},{"ruleId":"289","severity":1,"message":"337","line":15,"column":8,"nodeType":"291","messageId":"292","endLine":15,"endColumn":18},{"ruleId":"289","severity":1,"message":"322","line":17,"column":3,"nodeType":"291","messageId":"292","endLine":17,"endColumn":22},{"ruleId":"289","severity":1,"message":"338","line":18,"column":3,"nodeType":"291","messageId":"292","endLine":18,"endColumn":25},{"ruleId":"289","severity":1,"message":"339","line":19,"column":3,"nodeType":"291","messageId":"292","endLine":19,"endColumn":33},{"ruleId":"289","severity":1,"message":"340","line":2,"column":24,"nodeType":"291","messageId":"292","endLine":2,"endColumn":25},"no-native-reassign",["341"],"no-negated-in-lhs",["342"],"@typescript-eslint/no-unused-vars","'blue' is defined but never used.","Identifier","unusedVar","'setProductsIDs' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'tempPrice'.","ArrowFunctionExpression","unsafeRefs","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setProductState' and 'setReviewsState'. Either include them or remove the dependency array.","ArrayExpression",["343"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Category' is defined but never used.","'fetchCategories' is defined but never used.","'image' is defined but never used.","'makeStyles' is defined but never used.","'TasksProgress' is defined but never used.","no-unused-vars","'clsx' is defined but never used.",["341"],["342"],"'colors' is defined but never used.","'BASE_URL_IMAGES' is defined but never used.","'CardActions' is defined but never used.","'Button' is defined but never used.","'ArrowDownwardIcon' is defined but never used.","'fetchTotalCustomers' is defined but never used.","'ArrowUpwardIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchMoreOrders'. Either include it or remove the dependency array.",["344"],"'create' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchMoreProducts'. Either include it or remove the dependency array.",["345"],"'makeCall' is defined but never used.","'setEditProduct' is assigned a value but never used.","'setProduct' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'calledFirstTime'. Either include it or remove the dependency array.",["346"],"'PeopleIcon' is defined but never used.","'TotalCustomersResponse' is defined but never used.","'TotalAvailableProductsResponse' is defined but never used.","'T' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},"Update the dependencies array to be: [setProductState, setReviewsState]",{"range":"355","text":"356"},"Update the dependencies array to be: [fetchMoreOrders]",{"range":"357","text":"358"},"Update the dependencies array to be: [fetchMoreProducts]",{"range":"359","text":"360"},"Update the dependencies array to be: [fullName, address, city, postCode, country, calledFirstTime]",{"range":"361","text":"362"},[2441,2443],"[setProductState, setReviewsState]",[931,933],"[fetchMoreOrders]",[2257,2259],"[fetchMoreProducts]",[1880,1920],"[fullName, address, city, postCode, country, calledFirstTime]"]