[{"/Users/andreia/WebstormProjects/freelance-website-react/src/index.js":"1","/Users/andreia/WebstormProjects/freelance-website-react/src/App.tsx":"2","/Users/andreia/WebstormProjects/freelance-website-react/src/contexts/CartContext.tsx":"3","/Users/andreia/WebstormProjects/freelance-website-react/src/contexts/CategoriesContext.tsx":"4","/Users/andreia/WebstormProjects/freelance-website-react/src/components/Navbar.tsx":"5","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Cart.tsx":"6","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Register.tsx":"7","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/SignIn.tsx":"8","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/ExpandedProduct.tsx":"9","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/ProductsPage.tsx":"10","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Home.tsx":"11","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/Dashboard.tsx":"12","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TasksProgress.js":"13","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalProfit.js":"14","/Users/andreia/WebstormProjects/freelance-website-react/src/components/StorageHandler.ts":"15","/Users/andreia/WebstormProjects/freelance-website-react/src/Utils.ts":"16","/Users/andreia/WebstormProjects/freelance-website-react/src/components/LiveSearch.ts":"17","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/OrderRepository.ts":"18","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/CallRunner.ts":"19","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/ProductRepository.ts":"20","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/AuthRepository.ts":"21","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/ReviewsRepository.ts":"22","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/UserManager.ts":"23","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/CartProducts.tsx":"24","/Users/andreia/WebstormProjects/freelance-website-react/src/components/Product.tsx":"25","/Users/andreia/WebstormProjects/freelance-website-react/src/components/CarouselImages.tsx":"26","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/WriteReviewModal.tsx":"27","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalAmount.tsx":"28","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalCustomers.tsx":"29","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/LatestOrders.tsx":"30","/Users/andreia/WebstormProjects/freelance-website-react/src/components/AddProductModal.tsx":"31","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/LatestProducts.tsx":"32","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/AddCategoryModal.tsx":"33","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/ApiConstants.ts":"34","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/ImageUtils.ts":"35","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/requests/ApiRequest.ts":"36","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/AnalyticsRepository.ts":"37","/Users/andreia/WebstormProjects/freelance-website-react/src/utils/Messages.ts":"38","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/CategoriesRepository.ts":"39","/Users/andreia/WebstormProjects/freelance-website-react/src/components/ConfirmationModal.tsx":"40","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/CartItem.tsx":"41","/Users/andreia/WebstormProjects/freelance-website-react/src/entities/Order.ts":"42","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/IncreaseStockModal.tsx":"43","/Users/andreia/WebstormProjects/freelance-website-react/src/components/ModifyProductModal.tsx":"44","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/PaymentRepository.ts":"45","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/PaymentResult.tsx":"46","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Checkout.tsx":"47","/Users/andreia/WebstormProjects/freelance-website-react/src/entities/CountriesList.ts":"48","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalAvailableProducts.tsx":"49"},{"size":199,"mtime":1610925698111,"results":"50","hashOfConfig":"51"},{"size":4446,"mtime":1611165128725,"results":"52","hashOfConfig":"51"},{"size":1391,"mtime":1610925698110,"results":"53","hashOfConfig":"51"},{"size":985,"mtime":1610925698110,"results":"54","hashOfConfig":"51"},{"size":3925,"mtime":1611163993473,"results":"55","hashOfConfig":"51"},{"size":5200,"mtime":1611226643110,"results":"56","hashOfConfig":"51"},{"size":7439,"mtime":1610925698112,"results":"57","hashOfConfig":"51"},{"size":4579,"mtime":1610925698112,"results":"58","hashOfConfig":"51"},{"size":9254,"mtime":1611227084484,"results":"59","hashOfConfig":"51"},{"size":3116,"mtime":1610925698112,"results":"60","hashOfConfig":"51"},{"size":2779,"mtime":1611168415013,"results":"61","hashOfConfig":"51"},{"size":3050,"mtime":1611231482542,"results":"62","hashOfConfig":"51"},{"size":1470,"mtime":1610925698110,"results":"63","hashOfConfig":"51"},{"size":1074,"mtime":1610925698110,"results":"64","hashOfConfig":"51"},{"size":1759,"mtime":1610925698109,"results":"65","hashOfConfig":"51"},{"size":249,"mtime":1610925698107,"results":"66","hashOfConfig":"51"},{"size":2144,"mtime":1611171260617,"results":"67","hashOfConfig":"51"},{"size":926,"mtime":1610925698113,"results":"68","hashOfConfig":"51"},{"size":893,"mtime":1611231382272,"results":"69","hashOfConfig":"51"},{"size":3267,"mtime":1611069004409,"results":"70","hashOfConfig":"51"},{"size":2028,"mtime":1610925698113,"results":"71","hashOfConfig":"51"},{"size":763,"mtime":1610925698113,"results":"72","hashOfConfig":"51"},{"size":837,"mtime":1610925698114,"results":"73","hashOfConfig":"51"},{"size":602,"mtime":1610925698112,"results":"74","hashOfConfig":"51"},{"size":1935,"mtime":1611169661835,"results":"75","hashOfConfig":"51"},{"size":1777,"mtime":1611069666663,"results":"76","hashOfConfig":"51"},{"size":3642,"mtime":1610925698109,"results":"77","hashOfConfig":"51"},{"size":2123,"mtime":1610925698110,"results":"78","hashOfConfig":"51"},{"size":2450,"mtime":1610925698110,"results":"79","hashOfConfig":"51"},{"size":5797,"mtime":1611226438639,"results":"80","hashOfConfig":"51"},{"size":5460,"mtime":1610925698107,"results":"81","hashOfConfig":"51"},{"size":6020,"mtime":1611226578202,"results":"82","hashOfConfig":"51"},{"size":2553,"mtime":1611153615548,"results":"83","hashOfConfig":"51"},{"size":2047,"mtime":1611232584653,"results":"84","hashOfConfig":"51"},{"size":811,"mtime":1610925698114,"results":"85","hashOfConfig":"51"},{"size":726,"mtime":1610925698114,"results":"86","hashOfConfig":"51"},{"size":1277,"mtime":1611231482549,"results":"87","hashOfConfig":"51"},{"size":341,"mtime":1610925698114,"results":"88","hashOfConfig":"51"},{"size":430,"mtime":1611153615551,"results":"89","hashOfConfig":"51"},{"size":1875,"mtime":1610971766368,"results":"90","hashOfConfig":"51"},{"size":3161,"mtime":1611069781635,"results":"91","hashOfConfig":"51"},{"size":441,"mtime":1610925698111,"results":"92","hashOfConfig":"51"},{"size":2863,"mtime":1610925698109,"results":"93","hashOfConfig":"51"},{"size":5144,"mtime":1610925698108,"results":"94","hashOfConfig":"51"},{"size":568,"mtime":1610987190571,"results":"95","hashOfConfig":"51"},{"size":1781,"mtime":1611237280590,"results":"96","hashOfConfig":"51"},{"size":7458,"mtime":1611002017534,"results":"97","hashOfConfig":"51"},{"size":5027,"mtime":1610999449285,"results":"98","hashOfConfig":"51"},{"size":2303,"mtime":1611231482539,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1mxsy89",{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"106"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"106"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"134"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"106"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"106"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"106"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"106"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"106"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"106"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"106"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"106"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"106"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"106"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"106"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"106"},"/Users/andreia/WebstormProjects/freelance-website-react/src/index.js",[],["221","222"],"/Users/andreia/WebstormProjects/freelance-website-react/src/App.tsx",["223"],"\nimport './App.css';\nimport React, {Suspense} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport {CartProvider} from \"./contexts/CartContext\";\nimport  {CategoriesProvider} from \"./contexts/CategoriesContext\";\nimport Navbar from \"./components/Navbar\";\nimport Dashboard from \"./components/reports/DashboardView/Dashboard\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core\";\nimport {blue} from \"@material-ui/core/colors\";\n\nexport default function  App(){\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                main:'#90C751'\n            },\n            secondary : {\n                main : '#639949'\n            }\n        },\n    });\n\n    const Register = React.lazy(()=> import('./pages/Register'))\n    const SignIn  = React.lazy(()=> import('./pages/SignIn'))\n    const Home = React.lazy(()=> import('./pages/Home'))\n    const Cart = React.lazy(()=>import('./pages/Cart'))\n    const ExpandedProduct = React.lazy(()=> import('./pages/ExpandedProduct'))\n    const ProductsPage = React.lazy(()=> import('./pages/ProductsPage'))\n\n    const CheckoutPage = React.lazy(()=> import('./pages/Checkout'))\n    const PaymentResultPage = React.lazy(()=>import('./pages/PaymentResult'))\n\n    return (\n     <MuiThemeProvider theme={theme}>\n        <Router>\n            <Switch>\n                <div>\n                   <CategoriesProvider>\n                        <CartProvider>\n                            <Navbar/>\n\n                            <Route path = \"/dashboard\" exact component={()=>\n                                <Suspense fallback = {<div>Loading...</div>} >\n                                    <Dashboard />\n                                </Suspense>\n                            } />\n\n                            <Route path = \"/\" exact component={()=>\n                                <Suspense fallback = {<div>Loading...</div>} >\n                                    <Home/>\n                                </Suspense>} />\n\n                            <div className={\"container-md\"}>\n                                <Route path = \"/cart\" exact component={()=>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <Cart />\n                                    </Suspense>} />\n                                <Route  path = \"/product/:productID\" exact component={()=>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <ExpandedProduct/>\n                                    </Suspense>\n                                } />\n                                <Route path={\"/products\"} exact component={()=>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <ProductsPage/>\n                                    </Suspense>\n                                } />\n                                <Route path=  \"/register\" exact component={ () =>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <Register />\n                                    </Suspense>\n                                } />\n                                <Route path=\"/pay\" exact component={\n                                    ()=> <Suspense fallback={<div>Loading...</div>} >\n                                       <CheckoutPage />\n                                    </Suspense>\n                                }\n                                />\n\n                                <Route path= \"/payment\" exact component={\n                                    ()=> <Suspense fallback={<div>Loading...</div>}>\n                                       <PaymentResultPage/>\n                                    </Suspense>\n                                } />\n\n\n\n                                <Route path = \"/login\" exact component={() =>\n                                    <Suspense fallback = {<div>Loading...</div>} >\n                                        <SignIn />\n                                    </Suspense>\n                                }\n                                />\n                            </div>\n                        </CartProvider>\n                   </CategoriesProvider>\n                </div>\n            </Switch>\n        </Router>\n\n     </MuiThemeProvider>\n    );\n}",["224","225"],"/Users/andreia/WebstormProjects/freelance-website-react/src/contexts/CartContext.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/contexts/CategoriesContext.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/Navbar.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Cart.tsx",["226","227","228","229"],"import React, {useContext, useEffect, useState} from 'react';\nimport CartProducts from './CartProducts';\nimport {CartContext} from \"../contexts/CartContext\";\nimport {fetchProduct} from \"../repositories/ProductRepository\";\nimport {ProductQuantity} from \"./CartItem\";\nimport {isUserLoggedIn} from \"../utils/UserManager\";\nimport {placeOrder} from \"../repositories/OrderRepository\";\nimport {deleteCartItems} from \"../components/StorageHandler\";\n\n\nconst Cart = () => {\n\n    const context = useContext(CartContext)\n\n\n    const [cartProducts, setCartProducts] = useState(new Array<ProductQuantity>())\n\n    const [totalPrice ,setTotalPrice] = useState(0)\n\n    const [canCheckout, setCanCheckout] = useState(false)\n\n    const [productsIDs,setProductsIDs] = [context.productsIDs,context.setProductsIDs]\n\n    useEffect(()=>{\n        let record : {[productID:number]: number} = {}\n        let tempPrice = 0\n        let tempCartProducts:Array<ProductQuantity> = []\n\n        productsIDs.forEach((id)=>{\n            if(record[id] === undefined){\n                record[id] = 0\n            }\n            record[id] ++\n        })\n        let promises = []\n        for (let key in record){\n            promises.push(fetchProduct(parseInt(key)).then(result=>{\n                let productQuantity:ProductQuantity={\n                    product:result,\n                    quantity : record[key]\n                }\n                tempCartProducts.push(productQuantity)\n                tempPrice += (productQuantity.quantity * productQuantity.product.price)\n            }).catch(error=>{\n                console.log(error)\n            }))\n        }\n        Promise.all(promises).then(()=>{\n            setTotalPrice(tempPrice)\n            setCartProducts(tempCartProducts)\n            validateCart(tempCartProducts)\n        })\n\n    },[productsIDs])\n\n    const handleCheckout = ()=>{\n        if(canCheckout){\n            if(isUserLoggedIn()){\n                window.location.href = \"/pay\"\n\n            }else{\n                window.location.href = \"/login\"\n            }\n        }else{\n\n            // @ts-ignore\n            $('#cartErrorModal').modal('show')\n        }\n    }\n\n    function validateCart(products:Array<ProductQuantity>){\n        let valid = true\n        products.forEach(productQuantity=>{\n            if(productQuantity.product.stock === 0 || productQuantity.quantity > productQuantity.product.stock){\n                valid = false\n            }\n        })\n        setCanCheckout(valid)\n    }\n    return (\n        <div>\n            <div >\n                <div className=\"text-center mt-5\">\n                    <h1>Cart</h1>\n                </div>\n\n                <div className=\"row no-gutters justify-content-center\">\n                    <div className=\"col-sm-9 p-3\">\n                        {\n                            productsIDs.length > 0 ?\n\n                            <CartProducts products={cartProducts}/> :\n                            <div className=\"p-3 text-center text-muted\">\n                                Your cart is empty\n                            </div>\n                        }\n                    </div>\n                    {\n                        productsIDs.length > 0 &&\n                        <div className=\"col-sm-3 p-3\">\n                            <div className=\"card card-body\">\n                                <p className=\"mb-1\">Total Items</p>\n                                <h4 className=\" mb-3 txt-right\">{productsIDs.length}</h4>\n                                <p className=\"mb-1\">Total Payment</p>\n                                <h3 className=\"m-0 txt-right\">{\"£\" + totalPrice}</h3>\n                                <hr className=\"my-4\"/>\n                                <div className=\"text-center\">\n                                    <button type=\"button\" className=\"btn btn-primary mb-2\"  onClick={handleCheckout}>CHECKOUT</button>\n                                </div>\n\n                            </div>\n                        </div>\n                    }\n                    \n                </div>\n            </div>\n\n            <div className=\"modal fade\" id=\"cartErrorModal\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"cartErrorModal\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                             Some of the products are not available\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Cart;","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Register.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/SignIn.tsx",["230","231"],"import React, {useEffect, useState} from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Alert from '@material-ui/lab/Alert';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {fetchToken} from \"../repositories/AuthRepository\";\nimport {isUserLoggedIn} from \"../utils/UserManager\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport default function SignIn() {\n\n    if(isUserLoggedIn()){\n        window.location.href = \"/\"\n    }\n\n    const classes = useStyles();\n\n     const [usernameValue, setUsernameValue] = useState(\"\")\n     const [passwordValue, setPasswordValue] = useState(\"\")\n\n     const[usernameValid, setUsernameValid] = useState(false)\n     const[passwordValid, setPasswordValid] = useState(false)\n\n     const[errorMessage,setErrorMessage] = useState(\"\")\n\n    useEffect(()=>{\n       setUsernameValid(usernameValue.trim() !==\"\")\n       setPasswordValid(passwordValue.trim() !==\"\")\n\n    }, [usernameValue, passwordValue])\n\n\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <form className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"username\"\n                        label=\"Username\"\n                        name=\"text\"\n                        onChange={(event) => setUsernameValue(event.target.value) }\n                        autoComplete=\"username\"\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        onChange={(event)=>\n                            setPasswordValue(event.target.value)\n                        }\n                        autoComplete=\"current-password\"\n\n                    />\n                    <Alert severity=\"error\"\n                           hidden = {errorMessage.trim() === \"\"}\n\n                    >{errorMessage}</Alert>\n                    <Button\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                        onClick={()=> fetchToken(usernameValue,passwordValue).then(()=>{\n                            window.location.reload()\n                        }).catch(error=>{\n                            setErrorMessage(error)\n                        })}\n                        disabled={!(usernameValid && passwordValid)}>\n                        Sign In\n                    </Button>\n                    <Grid container>\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\">\n                                Forgot password?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"/register\" variant=\"body2\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n            <Box mt={8}>\n            </Box>\n        </Container>\n    );\n}\n","/Users/andreia/WebstormProjects/freelance-website-react/src/pages/ExpandedProduct.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/ProductsPage.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Home.tsx",["232","233"],"import React, {useEffect, useState} from \"react\";\nimport {Category, fetchCategories} from \"../repositories/ProductRepository\";\nimport image from '../baby-yoda.jpg'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nexport default function Home(){\n\n    const [categories,setCategories] = useState<Array<Category>>([])\n\n    useEffect(()=>{\n        fetchCategories().then(result=>{\n            setCategories(result)\n        }).catch(error=>{\n            console.log(error.error)\n        })\n    },[])\n\n    return (\n        <div className={\"container mt-5 \"}>\n            <div className={\"row\"}>\n                <div className=\"col-md-12\">\n                    <div className=\"jumbotron\">\n                        <h2 className=\"h2-responsive\">Welcome to our website</h2>\n                        <hr/>\n                            <p className={\"mt-5\"}>We have items made by our artists</p>\n                                <p>Click on one of the categories below to check the products</p>\n\n                       </div>\n                </div>\n            </div>\n             <div className={\"row\"}>\n                 <div className = {\"col\"}>\n                     <Typography variant=\"h4\" component=\"h2\">\n                         Categories\n                     </Typography>\n                 </div>\n\n             </div>\n           \n            <div className={\"row container-categories mt-5\"} >\n\n                {\n                    categories.map((category)=>{\n                        return(\n\n                            <div className={\"col\"}>\n                            <Card className={\"card-style\"} onClick={()=> window.location.href =\"/products?category=\" + category.name}>\n                                <CardActionArea >\n                                    <CardMedia\n                                        component=\"img\"\n                                        height=\"200\"\n                                        image= {category.image.imageURl}\n                                        title= {category.name}\n                                    />\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                            {category.name}\n                                        </Typography>\n                                    </CardContent>\n                                </CardActionArea>\n                            </Card>\n                            </div>\n                        )\n                    })\n\n                }\n            </div>\n        </div>\n    )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/Dashboard.tsx",["234"],"import React from 'react';\nimport {\n  Container,\n  Grid\n} from '@material-ui/core';\nimport TotalAmount from './TotalAmount';\nimport LatestOrders from './LatestOrders';\nimport TasksProgress from './TasksProgress';\nimport TotalCustomers from './TotalCustomers';\n\nimport AddProductModal from \"../../AddProductModal\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from '@material-ui/icons/Add';\nimport LatestProducts from \"./LatestProducts\";\nimport AddCategoryModal from \"../../modals/AddCategoryModal\";\nimport TotalProducts from \"./TotalAvailableProducts\";\nconst Dashboard = () => {\n\n\n\n  return (\n      <Container maxWidth={false} className={\"mt-4\"}>\n        <Grid\n          container\n          spacing={3}\n        >\n          <Grid\n            item\n            lg={3}\n            sm={6}\n            xl={3}\n            xs={12}\n          >\n            <TotalAmount />\n          </Grid>\n          <Grid\n            item\n            lg={3}\n            sm={6}\n            xl={3}\n            xs={12}\n          >\n            <TotalCustomers />\n          </Grid>\n          <Grid\n              item\n              lg={3}\n              sm={6}\n              xl={3}\n              xs={12}\n          >\n            <TotalProducts />\n          </Grid>\n\n\n          <Grid\n            item\n            lg={8}\n            md={12}\n            xl={9}\n            xs={12}\n          >\n            <LatestProducts />\n          </Grid>\n          <Grid\n              item\n            lg={4}\n            md={12}\n            xl ={3}\n            xs = {12}\n            >\n            <div className={\"wrapper-button-center mt-5\"}>\n            <Button type=\"button\"\n                    variant=\"contained\"\n                    color={\"primary\"}\n                    className=\"btn btn-primary\"\n                    data-toggle=\"modal\"\n                    data-target=\"#addProductModal\"\n                    startIcon={<AddIcon />}\n            >\n              Add product\n            </Button>\n            <AddProductModal />\n            </div>\n            <div className={\"wrapper-button-center mt-5\"}>\n              <Button type=\"button\"\n                      variant=\"contained\"\n                      color={\"primary\"}\n                      className=\"btn btn-primary\"\n                      data-toggle=\"modal\"\n                      data-target=\"#addCategoryModal\"\n                      startIcon={<AddIcon />}\n              >\n                Add Category\n              </Button>\n              <AddCategoryModal />\n            </div>\n        </Grid>\n          <Grid\n            item\n            lg={4}\n            md={6}\n            xl={3}\n            xs={12}\n          >\n          </Grid>\n          <Grid\n            item\n            lg={4}\n            md={6}\n            xl={3}\n            xs={12}\n          >\n          </Grid>\n          <Grid\n            item\n            lg={12}\n            md={12}\n            xl={12}\n            xs={12}\n          >\n            <LatestOrders />\n          </Grid>\n        </Grid>\n      </Container>\n  );\n};\n\nexport default Dashboard;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TasksProgress.js",["235"],"import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  LinearProgress,\n  Typography,\n  makeStyles,\n  colors\n} from '@material-ui/core';\nimport InsertChartIcon from '@material-ui/icons/InsertChartOutlined';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.orange[600],\n    height: 56,\n    width: 56\n  }\n}));\n\nconst TasksProgress = (\n) => {\n  const classes = useStyles();\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              TASKS PROGRESS\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              75.5%\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <InsertChartIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box mt={3}>\n          <LinearProgress\n            value={75.5}\n            variant=\"determinate\"\n          />\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nTasksProgress.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TasksProgress;\n",["236","237"],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalProfit.js",["238","239","240"],"import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  makeStyles,\n  colors\n} from '@material-ui/core';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\n\nconst TotalProfit = () => {\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              TOTAL PROFIT\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              $23,200\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar >\n              <AttachMoneyIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nTotalProfit.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalProfit;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/StorageHandler.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/Utils.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/LiveSearch.ts",["241"],"import {fetchSearchSuggestions, ProductModel} from \"../repositories/ProductRepository\";\nimport {BASE_URL_IMAGES} from \"../utils/ApiConstants\";\n\nlet suggestionConstainer = document.createElement(\"div\")\nsuggestionConstainer.setAttribute(\"id\", \"autocomplete-list\");\nsuggestionConstainer.setAttribute(\"class\", \"autocomplete-items\");\n\n\nclass SuggestionFactory{\n\n    createSuggestion(product:ProductModel){\n        return  new ProductSuggestion(product).suggestionView\n    }\n}\n\nclass ProductSuggestion{\n    public suggestionView: HTMLDivElement;\n\n    constructor(product:ProductModel) {\n        let name = product.name;\n        let id = product.productID;\n\n        this.suggestionView = document.createElement(\"div\");\n        let image = document.createElement(\"img\");\n        image.className = \"postSuggestionImage\";\n        image.src =  product.images[0].imageURl;\n        this.suggestionView.append(image);\n\n        this.suggestionView.innerHTML += name;\n\n        /*execute a function when someone clicks on the item value (DIV element):*/\n        this.suggestionView.addEventListener(\"click\", function (e) {\n            window.location.href = \"/product/\" + id\n        });\n    }\n}\n\nexport function performSearch(query :string){\n    if(query.trim()!== \"\") {\n        fetchSearchSuggestions(query).then(data => {\n            insertSuggestions(data)\n        }).catch(error => {\n            console.log(error)\n        })\n    }else{\n        clearSuggestionsList()\n    }\n}\n\n\nconst suggestionFactory = new  SuggestionFactory()\n\n\n\nfunction insertSuggestions(products : Array<ProductModel>){\n    clearSuggestionsList()\n    let searchField = document.getElementById(\"search-products-field\");\n    if(searchField?.parentNode != null){\n        //insert the suggestions postsSuggestionContainer as a child in the search field\n        searchField.parentNode.appendChild(suggestionConstainer);\n        //insert all available suggestions\n        products.forEach(product => {\n            suggestionConstainer.appendChild(suggestionFactory.createSuggestion(product));\n        });\n    }\n}\n\nfunction clearSuggestionsList() {\n    suggestionConstainer.innerHTML = \"\";\n}\n","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/OrderRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/CallRunner.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/ProductRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/AuthRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/ReviewsRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/utils/UserManager.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/CartProducts.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/Product.tsx",["242","243","244"],"\n// @ts-ignore\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {ProductModel} from '../repositories/ProductRepository'\nimport {BASE_URL_IMAGES} from \"../utils/ApiConstants\";\nimport {Alert} from \"@material-ui/lab\";\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        marginTop: 20\n    },\n});\n\ntype Props ={\n    product:ProductModel\n}\n\n function Product(props : Props) {\n\n    const classes = useStyles();\n\n    const product = props.product\n     \n    return (\n        <Card className={classes.root}\n           onClick= {()=> {window.location.href = \"/product/\" + product.productID }}\n        >\n            <CardActionArea  style={product.stock ===0 ?{opacity : 0.5} :  {}}>\n                <CardMedia\n                    component=\"img\"\n                    alt={product.name}\n                    height=\"200\"\n                    image= {product.images[0]?.imageURl}\n                    title= {product.name}\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {product.name}\n                    </Typography>\n                    <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                        {\"£\" + product.price }\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            {\n                product.stock ===0 &&\n                <Alert severity=\"warning\">Out of stock!</Alert>\n            }\n        </Card>\n    );\n\n}\nexport default Product","/Users/andreia/WebstormProjects/freelance-website-react/src/components/CarouselImages.tsx",["245"],"import {ProductImage} from \"../repositories/ProductRepository\";\nimport React from \"react\";\nimport {BASE_URL_IMAGES} from \"../utils/ApiConstants\";\n\n type props ={\n    images : Array<ProductImage>\n}\n\nexport default function CarouselImages (props: props){\n\n    let imagesItems = props.images.map((productImage,index)=>{\n        return ( <div className= {index ===0 ? \"carousel-item active\" : \"carousel-item\"} key={index + \"image\"}>\n                <img className=\"d-block w-100\" src={productImage.imageURl} alt=\"First slide\"/>\n            </div>)\n\n    })\n\n    let indicatorItems = props.images.map((product,index)=>{\n         return ( <li data-target=\"#carouselExampleIndicators\"  key = {product.imageURl} data-slide-to={index} className={index ===0 ? \"active\" : \"\"}/>)\n    })\n\n\n    return (\n                <div id=\"carouselExampleControls\" className=\"carousel slide\"   data-ride=\"carousel\">\n                    <ol className=\"carousel-indicators\">\n                        {indicatorItems}\n                    </ol>\n                    <div className=\"carousel-inner\">\n                        {imagesItems}\n                    </div>\n                    <a className=\"carousel-control-prev\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"prev\">\n                        <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n                        <span className=\"sr-only\">Previous</span>\n                    </a>\n                    <a className=\"carousel-control-next\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"next\">\n                        <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n                        <span className=\"sr-only\">Next</span>\n                    </a>\n                </div>\n\n    )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/WriteReviewModal.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalAmount.tsx",["246","247","248","249"],"import React, {useEffect, useState} from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport {fetchTotalAmount, fetchTotalCustomers} from \"../../../repositories/AnalyticsRepository\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.red[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.red[900]\n  },\n  differenceValue: {\n    color: colors.red[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst TotalAmount = () => {\n  const classes = useStyles();\n\n  const [totalAmount,setTotalAmount] = useState(0)\n\n  useEffect(()=>{\n        fetchTotalAmount().then(result=>{\n            setTotalAmount(result.total)\n        })\n  },[])\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n             TOTAL AMOUNT\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              {\"£\" +totalAmount}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <MoneyIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n          mt={2}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <Typography\n            color=\"textSecondary\"\n            variant=\"caption\"\n          >\n            In the last 30 days\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nTotalAmount.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalAmount;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalCustomers.tsx",["250"],"import React, {useEffect, useState} from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport PeopleIcon from '@material-ui/icons/PeopleOutlined';\nimport {fetchTotalCustomers, TotalCustomersResponse} from \"../../../repositories/AnalyticsRepository\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.green[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.green[900]\n  },\n  differenceValue: {\n    color: colors.green[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst TotalCustomers = () => {\n  const classes = useStyles();\n\n  const [totalCustomersResponse, setTotalCustomersResponse] = useState<TotalCustomersResponse>({\n     newUsersThisMonth : 0,\n    total : 0\n  })\n\n  useEffect(()=>{\n    fetchTotalCustomers().then(data=>{\n      setTotalCustomersResponse(data)\n    })\n  },[])\n\n  return (\n    <Card>\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              TOTAL CUSTOMERS\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              {totalCustomersResponse.total}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <PeopleIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n          mt={2}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <ArrowUpwardIcon className={classes.differenceIcon} />\n          <Typography\n            className={classes.differenceValue}\n            variant=\"body2\"\n          >\n            {totalCustomersResponse.newUsersThisMonth}\n          </Typography>\n          <Typography\n            color=\"textSecondary\"\n            variant=\"caption\"\n          >\n            New Customers in the last 30 days\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nTotalCustomers.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalCustomers;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/LatestOrders.tsx",["251"],"import React, {useEffect, useState} from 'react';\n\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Chip,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip\n} from '@material-ui/core';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport {Order, OrderStatus} from \"../../../entities/Order\";\nimport {getOrders} from \"../../../repositories/AnalyticsRepository\";\nimport {ConfirmationModal} from \"../../ConfirmationModal\";\nimport {updateOrder, UpdateOrderModel} from \"../../../repositories/OrderRepository\";\nimport {CHANGE_ORDER_STATUS} from \"../../../utils/Messages\";\nimport {v4 as uuidv4} from \"uuid\";\n\n\n\nconst LatestOrders = () => {\n\n    const [latestOrders,setLatestOrders] = useState<Array<Order>>([])\n\n    useEffect(()=>{\n        fetchMoreOrders()\n    },[])\n\n\n    const fetchMoreOrders = ()=>{\n        getOrders(currentPage).then(orders=>{\n            setCurrentPage(prevState =>  prevState + 1)\n            setLatestOrders(prevState => prevState.concat(orders))\n        }).catch(error=>{\n\n        })\n    }\n\n    const [changedOrder,setChangedOrder] = useState<UpdateOrderModel>()\n    const [confirmationMessage,setConfirmationMessage] = useState(\"\")\n    const [currentPage,setCurrentPage] = useState(1)\n\n\n\n\n    const handleChangeOrder = (order:Order,newOrderStatus:OrderStatus) =>{\n      setChangedOrder({orderID :order.orderID, newOrderStatus: newOrderStatus})\n      setConfirmationMessage(CHANGE_ORDER_STATUS(newOrderStatus))\n   }\n   const performChangeOrder = ()=>{\n      if(changedOrder){\n      updateOrder({newOrderStatus : changedOrder.newOrderStatus,orderID: changedOrder.orderID}).then(()=>{\n       let index  = latestOrders.findIndex(order => order.orderID === changedOrder.orderID)\n       latestOrders[index].orderStatus = changedOrder.newOrderStatus\n       let newOrdersList = [...latestOrders]\n       setLatestOrders(newOrdersList)\n       // @ts-ignore\n       $('#confirmationModalOrderChanged').modal('hide')\n     }).catch(error=>{\n       // @ts-ignore\n       $('#confirmationModalOrderChanged').modal('hide')\n     })\n      }\n   }\n\n\n  return (\n    <Card\n    >\n      <CardHeader title=\"Latest Orders\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={800}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  Order Ref\n                </TableCell>\n                <TableCell>\n                  Customer\n                </TableCell>\n                <TableCell sortDirection=\"desc\">\n                  <Tooltip\n                    enterDelay={300}\n                    title=\"Sort\"\n                  >\n                    <TableSortLabel\n                      active\n                      direction=\"desc\"\n                    >\n                      Date\n                    </TableSortLabel>\n                  </Tooltip>\n                </TableCell>\n                <TableCell>\n                  Status\n                </TableCell>\n                <TableCell/>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {\n                  latestOrders.length > 0 &&\n                  latestOrders.map((order) => (\n                <TableRow\n                  hover\n                  key={uuidv4()}\n                >\n                  <TableCell>\n                    {order.orderID}\n                  </TableCell>\n                  <TableCell>\n                    {order.user.username}\n                  </TableCell>\n                  <TableCell>\n                    {order.created}\n                  </TableCell>\n                  <TableCell>\n                    <Chip\n                      color=\"primary\"\n                      label={order.orderStatus}\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"dropdown\">\n                      <MoreVertIcon className=\"dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\"\n                              data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Dropdown\n                      </MoreVertIcon>\n\n                      <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                        <button className=\"dropdown-item\" type=\"button\" data-toggle=\"modal\" data-target=\"#confirmationModalOrderChanged\" onClick={()=>handleChangeOrder(order,OrderStatus.DELIVERED)}>Mark as delivered</button>\n                        <button className=\"dropdown-item\" type=\"button\" data-toggle=\"modal\" data-target=\"#confirmationModalOrderChanged\" onClick={()=>handleChangeOrder(order,OrderStatus.PENDING)}>Mark as pending</button>\n                        <button className=\"dropdown-item\" type=\"button\" data-toggle=\"modal\" data-target=\"#confirmationModalOrderChanged\" onClick={()=>handleChangeOrder(order,OrderStatus.REFUNDED)}>Mark as refunded</button>\n                      </div>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-end\"\n        p={2}\n      >\n        <Button\n          className={\"view-more-button\"}\n          onClick={fetchMoreOrders}\n          endIcon={<ArrowRightIcon />}\n          size=\"small\"\n          variant=\"text\"\n        >\n          View more\n        </Button>\n      </Box>\n      {\n        confirmationMessage.trim() !== \"\" &&\n      <ConfirmationModal confirmationText={confirmationMessage} onConfirm={performChangeOrder}/>\n       }\n    </Card>\n  );\n};\n\n\nexport default LatestOrders;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/AddProductModal.tsx",["252"],"import {createProduct} from \"../repositories/ProductRepository\";\nimport {useContext, useEffect, useState} from \"react\";\nimport {CategoriesContext} from \"../contexts/CategoriesContext\";\nimport {ProductCreationModel} from \"../repositories/ProductModels\";\nimport {create} from \"domain\";\n\nexport default function AddProductModal() {\n\n    const context = useContext(CategoriesContext)\n\n    const [productName, setProductName] = useState(\"\")\n    const [productPrice,setProductPrice] = useState(0)\n    const [productStock,setProductStock] = useState(0)\n    const [productDescription,setProductDescription] = useState(\"\")\n    const [images,setImages] = useState(FileList.prototype)\n    const [categoryID, setCategoryID] = useState(-1)\n\n\n    const [isFormValid, setIsFormValid] = useState(false)\n\n\n    const handleCreateProduct = () =>{\n        let model :ProductCreationModel = {\n            productName : productName,\n            price : productPrice,\n            categoryID : categoryID,\n            images : [],\n            description : productDescription,\n            stock: productStock\n        }\n\n        createProduct(model,images).then((data)=>[\n            // @ts-ignore\n            $('#addProductModal').modal('hide')\n        ]).catch(error =>{\n            console.log(error)\n        })\n    }\n\n\n    useEffect(()=>{\n        setIsFormValid(productName.trim() !== \"\" && productPrice >0 && images !== FileList.prototype && categoryID !== -1 && productStock > 0 && productDescription.trim().length > 0)\n    },[productName, productPrice, images, categoryID, productStock, productDescription])\n\n        return(\n    <div className=\"modal fade\" id=\"addProductModal\" tabIndex={-1} aria-labelledby=\"addProductModal\" aria-hidden=\"true\">\n        <div className=\"modal-dialog modal-dialog-centered\">\n            <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">Add product</h5>\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-name\" className=\"col-form-label\">Product name</label>\n                            <input type=\"text\" className=\"form-control\" id=\"product-name\"\n                                   onChange={(event) => setProductName(event.target.value)}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-price\" className=\"col-form-label\">Product price</label>\n                            <input type=\"number\" className=\"form-control\" id=\"product-price\"\n                                   onChange={(event) => setProductPrice(parseInt(event.target.value))}/>\n                        </div>\n                     <div className=\"form-group\">\n                         <label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">Category</label>\n                         <select className=\"custom-select my-1 mr-sm-2\" id=\"inlineFormCustomSelectPref\" defaultValue={-1} onChange={(event)=>{\n                            setCategoryID(parseInt(event.target.value))\n                         }}>\n                             <option value={-1} key={\"Choose...\"}>Choose...</option>\n                             {context.categories.map(category =>{\n                                 return  <option value={category.id} key={category.name}>{category.name}</option>\n                             })}\n                         </select>\n\n                     </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-stock\" className=\"col-form-label\">Products in stock</label>\n                            <input type=\"number\" className=\"form-control\" id=\"product-stock\"\n                                   onChange={(event) => setProductStock(parseInt(event.target.value))}/>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-description\">Product description</label>\n                            <textarea id=\"product-description\" className=\"form-control text-area\" name=\"product-description\"\n                                      rows={3} onChange={(event) => setProductDescription(event.target.value) }/>\n                        </div>\n\n                        <input type=\"file\" id=\"product-images\" multiple onChange={(event) => {\n                            if (event.target.files != null) {\n                                setImages(event.target.files)\n                            }\n\n                        }}/>\n\n                    </form>\n                </div>\n                <div className=\"modal-footer\">\n                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" >Close</button>\n                    <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\"\n                            disabled={!isFormValid}\n                            onClick={() => handleCreateProduct()}\n                    >Finish\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n        )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/LatestProducts.tsx",["253"],"import React, {useContext, useEffect, useState} from 'react';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Chip,\n  Divider, IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n\n} from '@material-ui/core';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport {fetchProductsByPage, ProductModel, pushDeleteProduct} from \"../../../repositories/ProductRepository\";\nimport ModifyProductModal from \"../../ModifyProductModal\";\n\nimport {IncreaseStockModal} from \"../../modals/IncreaseStockModal\";\nimport {CategoriesContext} from \"../../../contexts/CategoriesContext\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport {ConfirmationModal} from \"../../ConfirmationModal\";\nimport {CONFIRM_DELETE_PRODUCT} from \"../../../utils/Messages\";\n\nconst  LatestProducts = () => {\n\n  const [latestProducts,setLatestProducts] = useState<Array<ProductModel>>([])\n\n  const [editProduct,setEditProduct] = useState<ProductModel>()\n\n  const [deleteProduct,setDeleteProduct] = useState<ProductModel>()\n\n  const [productsPage,setProductsPage] = useState(1)\n\n  const  categories = useContext(CategoriesContext).categories\n\n  const [isRequestExecuting,setIsRequestExecuting] = useState(false)\n\n\nconst fetchMoreProducts = ()=>{\n    if(!isRequestExecuting) {\n      setIsRequestExecuting(true)\n      fetchProductsByPage(productsPage).then(data => {\n        setProductsPage(prevState => prevState + 1)\n        setLatestProducts(prevState => prevState.concat(data))\n        setIsRequestExecuting(false)\n      }).catch(error => {\n        setIsRequestExecuting(false)\n      })\n    }\n}\n\n  const performDeleteProduct = () =>{\n    closeConfirmationModal()\n    if(deleteProduct) {\n      pushDeleteProduct(deleteProduct.productID).then((result) => {\n        let index = latestProducts.findIndex(product => product.productID === deleteProduct.productID)\n        setLatestProducts(prevState => {\n           prevState.splice(index,1)\n           return [...prevState]\n        })\n      }).catch((error) => {\n      })\n    }\n     setDeleteProduct(undefined)\n  }\n\n  useEffect(()=>{\n  fetchMoreProducts()\n  },[])\n\n  function closeConfirmationModal(){\n    // @ts-ignore\n    $('#confirmationModalOrderChanged').modal('hide')\n  }\n\n  return (\n    <Card\n    >\n      <CardHeader title=\"Recently added products\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={800}>\n          <Table>\n            <TableHead >\n              <TableRow>\n                <TableCell >\n                </TableCell>\n                <TableCell>\n                Name\n                </TableCell>\n                <TableCell sortDirection=\"desc\">\n                   Price\n                </TableCell>\n                <TableCell>\n                  Stock\n                </TableCell>\n                <TableCell>\n                  Category\n                </TableCell>\n                <TableCell/>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {latestProducts.map((product) => (\n                <TableRow\n                  hover\n                  key={product.productID}\n                >\n                  <TableCell>\n                    {product.productID}\n                  </TableCell>\n                  <TableCell>\n                    {product.name}\n                  </TableCell>\n                  <TableCell>\n                    {\"£\" + product.price}\n                  </TableCell>\n                  <TableCell>\n                    <Chip\n                      color=\"primary\"\n                      label={product.stock}\n                      size=\"small\"\n                    />\n                    <IconButton aria-label=\"addStock\" data-toggle=\"modal\" data-target=\"#modalIncreaseStock\" onClick={()=>setEditProduct(product)}>\n                      <EditIcon color={\"primary\"} />\n                    </IconButton>\n                  </TableCell>\n                  <TableCell>\n                    {product.category.name}\n                  </TableCell>\n                  <TableCell>\n                  <Button variant=\"contained\" color=\"primary\" data-toggle=\"modal\" data-target=\"#modifyProductModal\"  onClick={()=>setEditProduct(product)}>\n                    Edit\n                  </Button>\n                  </TableCell>\n                  <TableCell>\n                    <Button className={\"delete-button\"}\n                        onClick={()=>setDeleteProduct(product)}\n                        data-toggle=\"modal\"\n                        data-target=\"#confirmationModalOrderChanged\"\n                        variant=\"contained\"\n                        startIcon={<DeleteIcon />}\n                    >\n                      Delete\n                    </Button>\n                  </TableCell>\n\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-end\"\n        p={2}\n      >\n        <Button\n          onClick={()=>fetchMoreProducts()}\n          className={\"view-more-button\"}\n          endIcon={<ArrowRightIcon />}\n          size=\"small\"\n          variant=\"text\"\n        >\n          View more\n        </Button>\n      </Box>\n      <div id={\"container-modal\"}>\n        {\n          editProduct &&\n          //@ts-ignore\n          <ModifyProductModal state={[editProduct, setEditProduct]}  categories={categories}/>\n        }\n        {editProduct &&\n            //@ts-ignore\n        <IncreaseStockModal stateEditProduct={[editProduct, setEditProduct]} state={[latestProducts, setLatestProducts]} />\n        }\n        {\n          deleteProduct &&\n              <ConfirmationModal confirmationText={CONFIRM_DELETE_PRODUCT(deleteProduct.productID)} onConfirm={performDeleteProduct} />\n        }\n      </div>\n    </Card>\n  );\n};\n\nLatestProducts.propTypes = {\n  className: PropTypes.string\n};\n\nexport default LatestProducts;\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/AddCategoryModal.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/utils/ApiConstants.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/utils/ImageUtils.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/requests/ApiRequest.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/AnalyticsRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/utils/Messages.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/CategoriesRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/ConfirmationModal.tsx",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/CartItem.tsx",["254"],"import React, { useContext } from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport {BASE_URL_IMAGES} from \"../utils/ApiConstants\";\nimport {CartContext} from \"../contexts/CartContext\";\nimport {ProductModel} from \"../repositories/ProductRepository\";\nimport {Alert} from \"@material-ui/lab\";\n\nexport type ProductQuantity ={\n    product:ProductModel,\n    quantity:number\n}\n\n\nconst CartItem = (props:ProductQuantity) => {\n      let product = props.product\n      let quantity  = props.quantity\n      const context = useContext(CartContext)\n\n    return (\n                <div className=\"row no-gutters py-2\">\n                    <div className=\"col-sm-2 p-2\">\n                        <img\n                            alt={product.name}\n                            style={{margin: \"0 auto\", maxHeight: \"50px\"}}\n                            src={product.images[0]?.imageURl} className=\"img-fluid d-block\"/>\n                    </div>\n                    <div className=\"col-sm-4 p-2\">\n                        <h5 className=\"mb-1\">{product.name}</h5>\n                        <p className=\"mb-1\">Price: {\"£\" + product.price} </p>\n\n                    </div>\n                    <div className=\"col-sm-2 p-2 text-center \">\n                        <p className=\"mb-0\">Quantity: {quantity}</p>\n                    </div>\n                    <div className=\"col-sm-4 p-2 text-right\">\n                        <button\n                            onClick={() => {\n                               context.addProduct(product.productID)\n                            }\n                            }\n                            className=\"btn btn-primary btn-sm mr-2 mb-1\">\n                            <AddIcon width={\"20px\"}/>\n                        </button>\n\n                        {\n                            quantity > 1 &&\n                            <button\n                                onClick={() => context.removeProduct(product.productID)}\n                                className=\"btn btn-danger btn-sm mb-1\">\n                                <RemoveIcon width={\"20px\"}/>\n                            </button>\n                        }\n\n                        {\n                            quantity === 1 &&\n                            <button\n                                onClick={() => context.removeProduct(product.productID)}\n                                className=\"btn btn-danger btn-sm mb-1\">\n                                <DeleteIcon width={\"20px\"}/>\n                            </button>\n                        }\n\n                    </div>\n                    {\n                       product.stock === 0 &&\n                        <Alert severity=\"error\">Unfortunately the product is no longer in stock</Alert>\n                    }\n                    {\n                        product.stock > 0 && props.quantity > product.stock &&\n                        <Alert severity=\"error\">Unfortunately we only have {product.stock} in stock </Alert>\n                    }\n                </div>\n            )\n\n}\n \nexport default CartItem;","/Users/andreia/WebstormProjects/freelance-website-react/src/entities/Order.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/modals/IncreaseStockModal.tsx",["255"],"import {increaseStock, ProductModel} from \"../../repositories/ProductRepository\";\nimport {ChangeEvent, Dispatch, SetStateAction, useEffect, useState} from \"react\";\n\n\ntype Props = {\n    stateEditProduct: [product :ProductModel,setProductModel:Dispatch<SetStateAction<ProductModel>>],\n    state: [Array<ProductModel>,Dispatch<SetStateAction<Array<ProductModel>>>]\n}\nexport function IncreaseStockModal(props:Props){\n\n      const [latestProducts,setLatestProducts] = props.state\n      const [editProduct,setEditProduct] = props.stateEditProduct\n\n     const [productStock,setProductStock] = useState(editProduct.stock)\n\n    useEffect(()=>{\n        setProductStock(editProduct.stock)\n    },[editProduct])\n\n\n    const handleStockValueChanged = (event :ChangeEvent<HTMLInputElement>) =>{\n          setProductStock(parseInt(event.target.value))\n    }\n    const handleIncreaseStock = () =>{\n          increaseStock(editProduct.productID,productStock).then(result=>{\n              let index = latestProducts.findIndex(predicate=>predicate.productID === editProduct.productID)\n              latestProducts[index].stock = productStock\n              setLatestProducts([...latestProducts])\n              // @ts-ignore\n              $('#modalIncreaseStock').modal('hide')\n          }).catch(error=>{\n              // @ts-ignore\n              $('#modalIncreaseStock').modal('hide')\n          })\n    }\n\n\n    return(\n        <div className=\"modal fade\" id=\"modalIncreaseStock\" tabIndex={-1} role=\"dialog\"\n             aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Modal title</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"product-stock\" className=\"col-form-label\">New stock</label>\n                            <input type=\"number\" className=\"form-control\" id=\"product-stock\"\n                                   onChange={handleStockValueChanged}/>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={()=>handleIncreaseStock()}>Save changes</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","/Users/andreia/WebstormProjects/freelance-website-react/src/components/ModifyProductModal.tsx",["256"],"import React, {ChangeEvent, Dispatch, SetStateAction, useEffect, useState} from \"react\";\nimport {Category, ProductModel, updateProduct} from \"../repositories/ProductRepository\";\n\ntype ModifyProductModalProps = {\n    state: [product :ProductModel,setProductModel:Dispatch<SetStateAction<ProductModel>>],\n    categories:Array<Category>\n}\n\nexport default function ModifyProductModal(props:ModifyProductModalProps) {\n\n    const [product,setProduct]= props.state\n\n    const [modifiedProduct, setModifiedProduct] = useState(product)\n    const [categoryID, setCategoryID] = useState(product.category.id)\n\n     useEffect(()=>{\n         setCategoryID(product.category.id)\n         setModifiedProduct(product)\n     },[product])\n\n    const handleCategoryChange = (event:ChangeEvent<HTMLSelectElement>)=>{\n        let newCategory = parseInt(event.target.value)\n        setCategoryID(newCategory)\n    }\n\n\n    return(\n        <div className=\"modal fade\" id=\"modifyProductModal\" tabIndex={-1} aria-labelledby=\"modifyProductModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-dialog-centered\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Modify product</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <form>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"product-name\" className=\"col-form-label\">Product name</label>\n                                <input type=\"text\" className=\"form-control\" id=\"product-name\" required={true}\n                                       value={modifiedProduct?.name}\n                                       onChange={(event) => {\n                                           let json = JSON.stringify(product)\n                                           let newObject = JSON.parse(json) as ProductModel\n                                           newObject.name = event.target.value\n                                            setModifiedProduct(newObject)\n\n                                       }}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"product-price\" className=\"col-form-label\">Product price</label>\n                                <input type=\"number\" className=\"form-control\" id=\"product-price\" defaultValue={product.price}\n                                       onChange={(event) => {\n                                           let json = JSON.stringify(product)\n                                           let newObject = JSON.parse(json) as ProductModel\n                                           newObject.price = parseFloat(event.target.value)\n                                           setModifiedProduct(newObject)\n\n                                       }} />\n                            </div>\n                            <div className=\"form-group\">\n                                <label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">Category</label>\n                                <select className=\"custom-select my-1 mr-sm-2\" id=\"inlineFormCustomSelectPref\" value={product.category.id} onChange={handleCategoryChange}>\n                                    {props.categories.map(category =>{\n                                        return  <option value={category.id} key={category.name} selected={category.id === product.category.id}>{category.name} </option>\n                                    })}\n                                </select>\n\n                            </div>\n                            <div className=\"mb-3 form-group\">\n                                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">Example\n                                    textarea</label>\n                                <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows={3}></textarea>\n                            </div>\n                        </form>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\"  onClick={()=>{\n\n                              updateProduct(product.productID,{price:modifiedProduct.price, name:modifiedProduct.name,categoryID: categoryID}).then(data=>{\n                                      window.location.reload()\n\n                                  }\n                              ).catch(error=>{\n                              })\n                        }}\n                        >Finish\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/repositories/PaymentRepository.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/PaymentResult.tsx",["257","258"],"/Users/andreia/WebstormProjects/freelance-website-react/src/pages/Checkout.tsx",["259","260"],"\nimport {loadStripe} from \"@stripe/stripe-js/pure\";\nimport {Button, CircularProgress} from \"@material-ui/core\";\nimport {fetchSessionID} from \"../repositories/PaymentRepository\";\nimport React, {useContext, useEffect, useState} from \"react\";\nimport {ProductQuantity} from \"./CartItem\";\nimport {fetchProduct} from \"../repositories/ProductRepository\";\nimport {CartContext} from \"../contexts/CartContext\";\nimport {countriesList} from \"../entities/CountriesList\";\n\nexport default function Checkout(){\n\n    //first check if all the items are still available\n    const stripePromise = loadStripe(\"pk_test_51IAupoDmEtsgvPpENLIxFZtKfI6tMlKSWvjsApqV1Ec6CIPv5rQfl2Peol02iCLDfQLJPRMUvtd1H8OP329gYD3Z00WzkWJJax\");\n\n    const [checkoutInProgress,setIsCheckoutInProgress] = useState(false)\n    const[isFetchingInitialData,setIsFetchingInitialData] = useState(true)\n\n    const [isFormValid,setIsFormValid] = useState(false)\n\n    const [fullName,setFullName] = useState(\"\")\n    const [validationErrorFullName,setValidationErrorFullName] = useState<string>()\n\n\n    const [address,setAddress] = useState(\"\")\n    const [city,setCity] = useState(\"\")\n    const [postCode, setPostcode] = useState(\"\")\n    const[country,setCountry] = useState(\"Select\")\n\n   const [calledFirstTime,setCalledFirstTime] = useState(false)\n\n    useEffect(()=>{\n        if(!calledFirstTime){\n            setCalledFirstTime(true)\n            return\n        }\n\n        \n        setIsFormValid(true)\n        setValidationErrorFullName(undefined)\n\n\n        if(fullName.length === 0){\n            setIsFormValid(false)\n            setValidationErrorFullName(\"Fuck you\")\n        }\n\n\n        if(address.length ===0){\n            setIsFormValid(false)\n        }\n        if(city.length === 0){\n            setIsFormValid(false)\n        }\n        if(country === \"Select\"){\n            setIsFormValid(false)\n        }\n        if(postCode.length === 0){\n            setIsFormValid(false)\n        }\n\n    },[fullName,address,city,postCode,country])\n\n\n     async function startPaymentFlow (){\n         setIsCheckoutInProgress(true)\n         fetchSessionID({amount :  totalPrice}).then((response)=>{\n             if(response.data?.id){\n                 presentPaymentCheckout(response.data.id)\n             }\n         })\n     }\n\n     async function presentPaymentCheckout(sessionID:string){\n         const stripe = await stripePromise\n         if(stripe != null) {\n             const paymentResult = await stripe.redirectToCheckout({\n                 sessionId: sessionID\n             })\n             if(paymentResult.error){\n                 console.log(paymentResult.error.message)\n             }\n         }\n\n    }\n    const context = useContext(CartContext)\n\n    const productsIDs =context.productsIDs\n\n\n    const [totalPrice ,setTotalPrice] = useState(0)\n\n    useEffect(()=>{\n        let record : {[productID:number]: number} = {}\n        let tempPrice = 0\n\n        productsIDs.forEach((id)=>{\n            if(record[id] === undefined){\n                record[id] = 0\n            }\n            record[id] ++\n        })\n        let promises = []\n        for (let key in record){\n            promises.push(fetchProduct(parseInt(key)).then(result=>{\n                let productQuantity:ProductQuantity={\n                    product:result,\n                    quantity : record[key]\n                }\n                tempPrice += (productQuantity.quantity * productQuantity.product.price)\n            }).catch(error=>{\n                console.log(error)\n            }))\n        }\n        Promise.all(promises).then(()=>{\n            setTotalPrice(tempPrice)\n            setIsFetchingInitialData(false)\n        })\n\n    },[productsIDs])\n\n\n\n\n\n    return(\n      <div className={\"row\"}>\n          <div className={\"col\"}>\n          <form>\n              <div className=\"form-group mt-5\">\n                  <label htmlFor=\"full_name_id\" className=\"control-label\">Full Name</label>\n                  <input type=\"text\" className={validationErrorFullName ? \"form-control is-invalid\" : \"form-control\"} id=\"full_name_id\" name=\"full_name\"\n                          aria-describedby={\"validation-fullname\"}\n                          placeholder=\"John Deer\"\n\n                          onChange = {(event)=> setFullName(event.target.value)}\n\n                   />\n                  <div id=\"validation-fullname\" className=\"invalid-feedback\">\n                       Please fill this\n                  </div>\n              </div>\n\n              <div className=\"form-group\">\n                  <label htmlFor=\"street1_id\" className=\"control-label\">Street Address</label>\n                  <input type=\"text\" className=\"form-control\" id=\"street1_id\" name=\"street1\"\n                         placeholder=\"Street address, P.O. box, company name, c/o\" onChange={(event)=>\n                      setAddress(event.target.value)\n                  }/>\n              </div>\n\n              <div className=\"form-group\">\n                  <label htmlFor=\"city_id\" className=\"control-label\">City</label>\n                  <input type=\"text\" className=\"form-control\" id=\"city_id\" name=\"city\" placeholder=\"Smallville\"\n                    onChange = {(event)=> setCity(event.target.value) }\n                  />\n              </div>\n\n              <div className=\"form-group\">\n                  <label htmlFor=\"state_id\" className=\"control-label\">Country</label>\n                  <select className=\"form-control\" id=\"state_id\" onChange ={(event)=> setCountry(event.target.value)}>\n                    <option value = \"Select\">Select</option>\n                      {\n                          countriesList.map(country =>{\n                              return (<option value={country}>{country}</option> )\n                          })\n                      }\n                  </select>\n              </div>\n\n              <div className=\"form-group\">\n                  <label htmlFor=\"zip_id\" className=\"control-label\">Zip Code</label>\n                  <input type=\"text\" className=\"form-control\" id=\"zip_id\" name=\"zip\" placeholder=\"#####\" onChange={event => setPostcode(event.target.value)}/>\n              </div>\n\n          </form>\n          </div>\n           <div className={\"col ml-5 mt-5\"}>\n                      <div className=\"card card-body\">\n                          <p className=\"mb-1\">Total Items</p>\n                          <h4 className=\" mb-3 txt-right\">{productsIDs.length}</h4>\n                          <p className=\"mb-1\">Total Payment</p>\n                          <h3 className=\"m-0 txt-right\">{\"£\" + totalPrice}</h3>\n                          <hr className=\"my-4\"/>\n                          <div className=\"text-center\">\n                              <div className={\"wrapper-button-with-loading\"}>\n                                  <Button\n                                      variant=\"contained\"\n                                      color=\"primary\"\n                                      disabled={checkoutInProgress || isFetchingInitialData || !isFormValid}\n                                      onClick={startPaymentFlow}\n                                  >\n                                      Confirm\n                                      {checkoutInProgress && <CircularProgress size={24} className={\"button-progress\"}/>}\n                                  </Button>\n\n                              </div>\n                          </div>\n                          </div>\n\n                      </div>\n\n          </div>\n  )\n}","/Users/andreia/WebstormProjects/freelance-website-react/src/entities/CountriesList.ts",[],"/Users/andreia/WebstormProjects/freelance-website-react/src/components/reports/DashboardView/TotalAvailableProducts.tsx",["261","262","263","264","265","266"],"import React, {useEffect, useState} from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport PeopleIcon from '@material-ui/icons/PeopleOutlined';\nimport {\n  fetchTotalCustomers, fetchTotalNumberAvailableProducts,\n  TotalCustomersResponse,\n  TotalAvailableProductsResponse\n} from \"../../../repositories/AnalyticsRepository\";\nimport {ShoppingBasket} from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.green[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.green[900]\n  },\n  differenceValue: {\n    color: colors.green[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst TotalCustomers = () => {\n  const classes = useStyles();\n\n  const [totalProducts,setTotalProducts] = useState(0)\n\n  useEffect(()=>{\n    fetchTotalNumberAvailableProducts().then(response=>{\n       if(response.data?.total){\n          setTotalProducts(response.data.total)\n       }\n\n    })\n  },[])\n\n  return (\n    <Card>\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              TOTAL PRODUCTS\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              {totalProducts}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <ShoppingBasket />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n            mt={2}\n            display=\"flex\"\n            alignItems=\"center\"\n        >\n          <Typography\n              color=\"textSecondary\"\n              variant=\"caption\"\n          >\n            Currently available on the website\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nTotalCustomers.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalCustomers;\n",{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","severity":1,"message":"272","line":10,"column":9,"nodeType":"273","messageId":"274","endLine":10,"endColumn":13},{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","severity":1,"message":"275","line":7,"column":9,"nodeType":"273","messageId":"274","endLine":7,"endColumn":19},{"ruleId":"271","severity":1,"message":"276","line":8,"column":9,"nodeType":"273","messageId":"274","endLine":8,"endColumn":24},{"ruleId":"271","severity":1,"message":"277","line":22,"column":24,"nodeType":"273","messageId":"274","endLine":22,"endColumn":38},{"ruleId":"278","severity":1,"message":"279","line":37,"column":60,"nodeType":"280","messageId":"281","endLine":44,"endColumn":14},{"ruleId":"271","severity":1,"message":"282","line":6,"column":8,"nodeType":"273","messageId":"274","endLine":6,"endColumn":24},{"ruleId":"271","severity":1,"message":"283","line":7,"column":8,"nodeType":"273","messageId":"274","endLine":7,"endColumn":16},{"ruleId":"271","severity":1,"message":"284","line":3,"column":8,"nodeType":"273","messageId":"274","endLine":3,"endColumn":13},{"ruleId":"271","severity":1,"message":"285","line":4,"column":9,"nodeType":"273","messageId":"274","endLine":4,"endColumn":19},{"ruleId":"271","severity":1,"message":"286","line":8,"column":8,"nodeType":"273","messageId":"274","endLine":8,"endColumn":21},{"ruleId":"287","severity":1,"message":"288","line":2,"column":8,"nodeType":"273","messageId":"274","endLine":2,"endColumn":12},{"ruleId":"267","replacedBy":"289"},{"ruleId":"269","replacedBy":"290"},{"ruleId":"287","severity":1,"message":"288","line":2,"column":8,"nodeType":"273","messageId":"274","endLine":2,"endColumn":12},{"ruleId":"287","severity":1,"message":"285","line":10,"column":3,"nodeType":"273","messageId":"274","endLine":10,"endColumn":13},{"ruleId":"287","severity":1,"message":"291","line":11,"column":3,"nodeType":"273","messageId":"274","endLine":11,"endColumn":9},{"ruleId":"271","severity":1,"message":"292","line":2,"column":9,"nodeType":"273","messageId":"274","endLine":2,"endColumn":24},{"ruleId":"271","severity":1,"message":"293","line":7,"column":8,"nodeType":"273","messageId":"274","endLine":7,"endColumn":19},{"ruleId":"271","severity":1,"message":"294","line":10,"column":8,"nodeType":"273","messageId":"274","endLine":10,"endColumn":14},{"ruleId":"271","severity":1,"message":"292","line":13,"column":9,"nodeType":"273","messageId":"274","endLine":13,"endColumn":24},{"ruleId":"271","severity":1,"message":"292","line":3,"column":9,"nodeType":"273","messageId":"274","endLine":3,"endColumn":24},{"ruleId":"271","severity":1,"message":"288","line":2,"column":8,"nodeType":"273","messageId":"274","endLine":2,"endColumn":12},{"ruleId":"271","severity":1,"message":"295","line":14,"column":8,"nodeType":"273","messageId":"274","endLine":14,"endColumn":25},{"ruleId":"271","severity":1,"message":"296","line":16,"column":27,"nodeType":"273","messageId":"274","endLine":16,"endColumn":46},{"ruleId":"271","severity":1,"message":"297","line":17,"column":8,"nodeType":"273","messageId":"274","endLine":17,"endColumn":23},{"ruleId":"271","severity":1,"message":"288","line":2,"column":8,"nodeType":"273","messageId":"274","endLine":2,"endColumn":12},{"ruleId":"298","severity":1,"message":"299","line":36,"column":7,"nodeType":"300","endLine":36,"endColumn":9,"suggestions":"301"},{"ruleId":"271","severity":1,"message":"302","line":5,"column":9,"nodeType":"273","messageId":"274","endLine":5,"endColumn":15},{"ruleId":"298","severity":1,"message":"303","line":75,"column":5,"nodeType":"300","endLine":75,"endColumn":7,"suggestions":"304"},{"ruleId":"271","severity":1,"message":"292","line":5,"column":9,"nodeType":"273","messageId":"274","endLine":5,"endColumn":24},{"ruleId":"271","severity":1,"message":"305","line":12,"column":26,"nodeType":"273","messageId":"274","endLine":12,"endColumn":40},{"ruleId":"271","severity":1,"message":"306","line":11,"column":20,"nodeType":"273","messageId":"274","endLine":11,"endColumn":30},{"ruleId":"307","severity":1,"message":"308","line":34,"column":33,"nodeType":"309","endLine":34,"endColumn":45},{"ruleId":"307","severity":1,"message":"308","line":40,"column":33,"nodeType":"309","endLine":40,"endColumn":45},{"ruleId":"298","severity":1,"message":"310","line":62,"column":7,"nodeType":"300","endLine":62,"endColumn":47,"suggestions":"311"},{"ruleId":"278","severity":1,"message":"279","line":105,"column":60,"nodeType":"280","messageId":"281","endLine":111,"endColumn":14},{"ruleId":"271","severity":1,"message":"288","line":2,"column":8,"nodeType":"273","messageId":"274","endLine":2,"endColumn":12},{"ruleId":"271","severity":1,"message":"297","line":14,"column":8,"nodeType":"273","messageId":"274","endLine":14,"endColumn":23},{"ruleId":"271","severity":1,"message":"312","line":15,"column":8,"nodeType":"273","messageId":"274","endLine":15,"endColumn":18},{"ruleId":"271","severity":1,"message":"296","line":17,"column":3,"nodeType":"273","messageId":"274","endLine":17,"endColumn":22},{"ruleId":"271","severity":1,"message":"313","line":18,"column":3,"nodeType":"273","messageId":"274","endLine":18,"endColumn":25},{"ruleId":"271","severity":1,"message":"314","line":19,"column":3,"nodeType":"273","messageId":"274","endLine":19,"endColumn":33},"no-native-reassign",["315"],"no-negated-in-lhs",["316"],"@typescript-eslint/no-unused-vars","'blue' is defined but never used.","Identifier","unusedVar","'placeOrder' is defined but never used.","'deleteCartItems' is defined but never used.","'setProductsIDs' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'tempPrice'.","ArrowFunctionExpression","unsafeRefs","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'image' is defined but never used.","'makeStyles' is defined but never used.","'TasksProgress' is defined but never used.","no-unused-vars","'clsx' is defined but never used.",["315"],["316"],"'colors' is defined but never used.","'BASE_URL_IMAGES' is defined but never used.","'CardActions' is defined but never used.","'Button' is defined but never used.","'ArrowDownwardIcon' is defined but never used.","'fetchTotalCustomers' is defined but never used.","'ArrowUpwardIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMoreOrders'. Either include it or remove the dependency array.","ArrayExpression",["317"],"'create' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchMoreProducts'. Either include it or remove the dependency array.",["318"],"'setEditProduct' is assigned a value but never used.","'setProduct' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'calledFirstTime'. Either include it or remove the dependency array.",["319"],"'PeopleIcon' is defined but never used.","'TotalCustomersResponse' is defined but never used.","'TotalAvailableProductsResponse' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},"Update the dependencies array to be: [fetchMoreOrders]",{"range":"326","text":"327"},"Update the dependencies array to be: [fetchMoreProducts]",{"range":"328","text":"329"},"Update the dependencies array to be: [fullName, address, city, postCode, country, calledFirstTime]",{"range":"330","text":"331"},[931,933],"[fetchMoreOrders]",[2244,2246],"[fetchMoreProducts]",[1945,1985],"[fullName, address, city, postCode, country, calledFirstTime]"]